var canvas = document.querySelector("canvas");
var surface = canvas.getContext("2d");

var elemInventory = document.getElementById("inventory");
var canvasInventory = elemInventory.getContext('2d');

var elemCraft= document.getElementById("craft");
var canvasCraft = elemCraft.getContext('2d');
var craftInvOpen = false;

var elemHealth = document.getElementById("health");
var canvasHealth = elemHealth.getContext('2d');

var elemRestart = document.getElementById("restart");
var canvasRestart = elemRestart.getContext('2d');

var elemPause = document.getElementById("pause");
var canvasPause = elemPause.getContext('2d');

var mapSizeX = 5760;
var mapSizeY = 5760;
var area = 0;

var player = {x:1544, y:1404, idle:true, attackable: true, flash: false, frame:0, dir:2, speed:1, xSize:48, ySize:64}
player.image = new Image();
player.image.src = "img/characterSheet.png";
var oldPosition = {x:player.x, y:player.y};

var enemy = {speed:.5, x:2184, y:1146, dx:0, dy:0, angle:0, distance:0, xSpeed:0, ySpeed:0, stun:false, dead:false, stunTime:0, size:32}
enemy.image = new Image();
enemy.image.src = "img/enemy.png";
var enemyOldPosition = {x:enemy.x, y:enemy.y};

var enemyStump = {speed:.5, x:3605, y:2098, dx:0, dy:0, angle:0, distance:0, xSpeed:0, ySpeed:0, frame:0, dir:2, currentFrame:0, maxFrames:60, stun:false, dead:false, stunTime:0, idle:true, oldPosX:0, oldPosY:0, size:32}
enemyStump.image = new Image();
enemyStump.image.src = "img/enemyStump.png";

var boomerang = {speed:1.5, x:0, y:0, dx:0, dy:0, angle:0, distance:0, xSpeed:0, ySpeed:0, thrown:false, timeThrown:0, frame:0, currentFrame:0, maxFrames:15, size:32}
boomerang.image = new Image();
boomerang.image.src = "img/boomerangSheet.png"

var weapon = {x:0, y:0, attack:false, dirX:0, dirY:0, vert:0, hor:0, frame:0, currentFrame:0, maxFrames:15, xSize:0, ySize:0}
weapon.image = new Image();
weapon.image.src = "img/axeSheet1.png";

var foodPickup = {x:1920, y:1100, width:64, height:64, used:false}
foodPickup.image = new Image();
foodPickup.image.src = "img/carrot.png";

var tree = {x: 1408, y:1476, width:64, height:64, used:false}
tree.image = new Image();
tree.image.src = "img/treeSingle.png";

var tree_Boss = {x: 580, y:1396, width:64, height:64, used:false}
tree_Boss.image = new Image();
tree_Boss.image.src = "img/treeSingle.png";

var sign = {x:1280, y:1280, width:64, height:64}
sign.image = new Image();
sign.image.src = "img/sign.png";

var stickPickup = {x:456, y:128, width:64, height:64, used:false}
stickPickup.image = new Image();
stickPickup.image.src = "img/stick.png";

var rockPickup = {x:456, y:768, width:64, height:64, used:false}
rockPickup.image = new Image();
rockPickup.image.src = "img/rock.png";

var flintPickup = {x:456, y:128, width:64, height:64, used:false}
flintPickup.image = new Image();
flintPickup.image.src = "img/flint.png";

var rodPickup = {x:0, y:0, width:64, height:64, used:false}
rodPickup.image = new Image();
rodPickup.image.src = "img/rod.png";

var vinePickup = {x:500, y:1000, width:64, height:64, used:false}
vinePickup.image = new Image();
vinePickup.image.src = "img/vine.png";

var cookedPickup = {x:0, y:0, width:64, height:64, used:false}
cookedPickup.image = new Image();
cookedPickup.image.src = "img/cooked.png";

var firePickup = {x:0, y:0, width:64, height:64, used:false}
firePickup.image = new Image();
firePickup.image.src = "img/fire.png";

var hidePickup = {x:1860, y:1100, width:64, height:64, used:false}
hidePickup.image = new Image();
hidePickup.image.src = "img/hide.png";

var axePickup = {x:0, y:0, width:64, height:64, used:false}
axePickup.image = new Image();
axePickup.image.src = "img/axe.png";

var logPickup = {x:4000, y:1000, width:64, height:64, used:false}
logPickup.image = new Image();
logPickup.image.src = "img/logs.png"

var crftPlus = {}
crftPlus.image = new Image();
crftPlus.image.src = "img/craftingPlus.png";

var crftEqual = {}
crftEqual.image = new Image();
crftEqual.image.src = "img/craftingEquals.png";

var playerHealth = 3;

var heart = {}
heart.image = new Image();
heart.image.src = "img/heart.png";

var currentFrame = 0;
var maxFrames = 60;

var leftPressed = false;
var rightPressed = false;
var upPressed = false;
var downPressed = false;

var endTime = 360;
var currentTime = 0;
var endTimer;

var inventory = [];
var craftInv = [];

var mapFarm = [];
var mapCollidable = [];
var mapCollidableArea1 = [];
var mapCollidableArea2 = [];
var mapCollidableBoss = [];

var warpZone0 = [];
var warpZone1 = [];
var warpZone2 = [];
var warpZoneBoss = [];

var textBoxOpen = false;
	
var rndNum;	
	
var imgStr = 	["floorM", "floorU", "floorD", "floorL", "floorR", "floorTopL", "floorTopR", "floorBotL", "floorBotR",
/*Starts at 9*/  "floorHorL", "floorHorM", "floorHorR", "floorVertU", "floorVertM", "floorVertD", "floorDot",
/*Starts at 16*/ "wallX", "wallY", "cornerTopL", "cornerTopR", "cornerBotL", "cornerBotR",
/*Starts at 22*/ "waterM", "waterU", "waterD", "waterL", "waterR", "waterTopL", "waterTopR", "waterBotL", "waterBotR",
/*Starts at 31*/ "waterHorL", "waterHorM", "waterHorR", "waterVertU", "waterVertM", "waterVertD", "waterDot",
/*Starts at 38*/ "farmU", "farmM", "farmD",
/*Starts at 41*/ "mFloorM", "mFloorU", "mFloorD", "mFloorL", "mFloorR", "mFloorTopL", "mFloorTopR", "mFloorBotL", "mFloorBotR",
/*Starts at 50*/ "mFloorHorL", "mFloorHorM", "mFloorHorR", "mFloorVertU", "mFloorVertM", "mFloorVertD", "mFloorDot",
/*Starts at 57*/ "tWallM", "tWallU", "tWallD", "tWallL", "tWallR", "wall",
/*Starts at 63*/ "doorU", "doorD", "doorL", "doorR", "warpArea1", "warpArea2", "bridge"];

var imgStr1 =   ["1", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23",
				 "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38",
				 "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53",
				 "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68",
				 "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83",
				 "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98",
				 "99", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "112", "113",
				 "114", "115", "116", "117", "118", "119", "120", "121", "122", "123", "124", "125", "126", "127", "128",
				 "129", "130", "131", "132", "133", "134", "135", "136", "137", "138", "139", "140", "141", "142", "143", "144",
				 "145", "146", "147", "148", "149", "150", "151"];

var imgStr2 =   ["1", "1", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23",
				 "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38",
				 "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53",
				 "54", "55", "56", "57", "58", "59", "60", "61"];	

var imgStr3 = ["1","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19"];			 

var images = [];
var images1 = [];
var images2 = [];
var images3 = [];

var map =
[
	[18,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,67,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,19],
	[17,46,42,42,42,42,42,42,42,42,42,47,16,50,47,16,46,42,42,47,16,46,42,42,42,47,16,46,42,42,42,47,16,46,42,42,42,47,16,46,42,47,16,53,16,53,16,53,17],
	[17,54,16,44,49,16,48,45,16,54,16,54,16,16,54,16,48,41,43,43,43,49,16,56,16,48,51,49,16,48,45,16,16,44,45,16,16,44,42,43,43,43,51,41,51,45,16,54,17],
	[17,54,16,54,18,16,19,54,16,54,16,54,16,46,45,16,16,54,16,16,16,16,16,16,16,16,16,16,16,16,48,52,16,48,41,47,16,44,45,16,16,16,16,54,16,54,16,54,17],
	[17,54,16,56,16,53,16,54,16,54,16,54,16,48,43,49,16,48,49,16,48,51,43,43,51,45,16,46,51,42,42,45,16,16,48,41,51,42,45,16,16,53,16,54,16,54,16,54,17],
	[17,54,62,62,62,54,62,54,62,56,62,56,62,62,54,62,48,43,49,62,48,49,62,48,51,43,43,51,45,62,46,51,42,42,45,62,62,48,41,51,42,45,62,54,62,54,62,54,17],
	[17,48,51,47,62,54,62,54,62,62,62,62,62,46,49,62,62,62,62,62,62,62,62,62,62,62,62,62,48,51,49,62,48,43,41,52,62,62,54,62,48,45,62,56,62,48,51,45,17],
	[17,62,62,48,51,45,62,48,51,42,51,47,62,54,62,62,46,42,47,62,46,47,62,46,42,42,47,62,62,62,62,62,62,62,54,62,62,46,47,62,62,54,62,62,62,62,62,54,17],
	[17,53,62,62,62,54,62,62,62,54,62,54,62,44,51,51,43,43,41,51,41,41,42,41,41,41,41,42,51,42,42,42,51,42,41,52,62,44,45,62,46,45,62,46,47,62,44,45,17],
	[17,48,51,47,62,48,54,54,42,49,62,54,62,56,62,62,62,62,56,62,48,43,43,43,43,43,43,49,62,48,43,49,62,48,49,62,62,48,49,62,48,43,51,41,43,47,62,56,17],
	[17,62,62,54,62,62,62,62,54,62,62,54,18,16,16,16,16,16,16,16,16,16,16,16,63,16,16,16,16,16,16,16,16,16,16,16,19,62,62,62,62,62,62,56,62,48,49,62,17],
	[17,47,62,44,51,51,42,51,45,62,46,45,17,5,1,1,11,27,23,23,23,28,5,1,1,1,1,1,1,1,10,1,10,1,10,6,17,46,47,62,53,62,62,62,62,62,62,62,17],
	[17,54,62,54,62,62,54,62,54,62,44,45,17,3,0,4,27,22,22,22,22,30,3,0,0,0,0,0,0,4,38,13,38,13,38,13,17,44,45,62,48,47,62,53,62,46,42,52,17],
	[17,54,62,48,47,62,54,62,54,62,44,45,17,3,0,4,25,22,22,22,26,5,0,0,0,0,0,0,0,4,39,13,39,13,39,13,17,44,45,62,62,54,62,44,42,43,45,62,17],
	[17,54,62,62,54,62,56,62,54,62,48,45,17,3,0,8,25,22,22,22,26,3,0,0,0,0,0,0,0,4,39,13,39,13,39,13,17,48,45,62,46,49,62,44,45,62,44,47,17],
	[17,44,47,62,54,62,62,62,54,62,62,45,17,3,4,27,22,22,22,22,30,3,0,0,0,0,0,0,0,4,39,13,39,13,39,13,17,62,54,62,54,62,62,44,49,62,44,45,17],
	[17,44,45,62,48,51,47,62,44,47,62,54,17,3,4,25,22,22,22,26,5,0,0,0,0,0,0,0,0,4,39,13,39,13,39,13,17,46,45,62,54,47,62,54,62,62,44,45,17],
	[17,44,45,62,62,62,54,62,44,49,62,54,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,4,39,13,39,13,39,13,17,44,45,62,44,41,51,41,47,62,44,45,17],
	[17,44,43,51,47,62,54,62,54,62,62,54,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,4,40,13,40,13,40,13,17,44,49,62,44,45,62,48,45,62,44,49,17],
	[17,54,62,62,54,62,54,62,54,62,46,45,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,1,0,1,0,1,4,17,54,62,62,48,45,62,62,54,62,54,62,17],
	[17,54,62,46,49,62,54,62,54,62,44,45,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,44,47,62,62,54,62,46,45,62,44,52,17],
	[17,54,62,54,62,62,48,51,41,42,41,45,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,44,45,62,46,45,62,44,41,51,45,62,17],
	[17,54,62,54,62,53,62,62,44,43,41,45,65,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,66,44,45,62,44,49,62,44,45,62,48,49,17],
	[17,54,62,54,62,48,51,51,45,62,54,55,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,44,45,62,54,62,62,44,49,62,62,62,17],
	[17,53,62,54,62,62,62,62,54,62,48,45,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,44,49,62,44,47,62,54,62,62,46,42,62],
	[17,46,51,49,62,50,43,42,41,47,62,54,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,54,62,62,44,45,62,44,47,62,48,41,62],
	[17,54,62,62,62,62,62,48,41,49,62,54,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,44,47,62,44,45,62,44,45,62,62,54,17],
	[17,54,62,46,42,47,62,62,54,62,62,54,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,48,45,62,44,45,62,44,43,42,42,45,17],
	[17,54,62,54,62,48,47,62,44,52,62,54,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,62,54,62,44,45,62,56,62,48,43,49,17],
	[17,54,62,54,62,62,54,62,54,62,62,54,17,3,8,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,46,49,62,44,45,62,62,62,62,62,62,17],
	[17,54,62,44,47,62,54,62,44,47,62,54,17,13,27,22,22,22,22,30,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,54,62,62,44,45,62,50,42,47,62,53,17],
	[17,54,62,44,45,62,54,62,44,49,62,54,17,13,25,22,22,22,26,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,44,47,62,44,49,62,62,44,43,42,45,17],
	[17,54,62,44,45,62,54,62,54,62,62,54,17,27,22,22,22,22,30,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,48,41,42,45,62,62,46,49,62,44,49,17],
	[17,54,62,44,45,62,54,62,54,62,62,56,17,29,24,24,24,30,9,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,17,62,48,43,43,52,62,56,62,62,54,62,17],
	[17,54,62,44,45,62,54,62,44,47,62,62,20,16,16,16,16,16,16,16,16,16,16,16,64,16,16,16,16,16,16,16,16,16,16,16,21,62,62,62,62,62,62,62,62,62,44,47,17],
	[17,54,62,44,43,51,41,51,41,45,62,48,43,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,47,62,46,51,51,51,51,51,51,51,51,51,52,62,62,54,17],
	[17,54,62,54,62,62,54,62,44,45,62,62,62,48,43,41,43,43,43,49,62,48,43,43,43,43,43,49,62,48,49,62,48,42,49,62,62,62,62,62,62,62,62,62,62,62,46,45,17],
	[17,54,62,54,62,46,49,62,44,43,52,62,62,62,62,54,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,54,62,62,46,42,51,47,62,46,51,42,47,62,44,49,17],
	[17,54,62,54,62,54,62,62,54,62,62,62,53,62,46,41,51,51,51,51,42,42,47,62,62,46,51,51,51,52,62,53,62,54,62,50,43,45,62,48,51,45,62,48,49,62,54,62,17],
	[17,54,62,54,62,54,62,46,49,62,44,42,43,51,43,49,62,62,62,62,48,43,45,62,62,54,62,62,54,62,62,54,62,54,62,62,62,54,62,62,62,54,62,62,62,62,44,47,17],
	[17,54,62,54,62,54,62,54,62,62,44,45,62,62,62,62,62,46,47,62,62,62,48,42,42,49,62,46,45,62,46,41,51,43,51,51,51,49,62,62,46,43,51,51,52,62,44,45,17],
	[17,54,62,54,62,54,62,54,62,50,41,41,51,51,51,51,51,43,43,51,47,62,62,48,49,62,62,44,49,62,48,49,62,62,62,62,62,62,62,46,49,62,62,62,62,62,44,45,17],
	[17,54,62,54,62,54,62,54,62,62,44,45,62,62,62,62,62,62,62,62,48,47,62,62,62,62,46,49,62,62,62,62,62,46,42,51,42,42,51,45,62,62,46,51,47,62,48,45,17],
	[17,54,62,62,50,49,62,48,47,62,48,41,42,42,42,42,42,42,47,62,62,48,51,51,51,51,49,62,62,62,50,51,42,43,49,62,48,45,62,48,52,62,54,62,54,62,62,54,17],
	[17,44,47,62,62,62,62,62,54,62,62,48,43,43,43,43,43,43,41,47,62,62,62,62,62,62,62,62,53,62,62,62,54,62,62,62,62,54,62,62,62,62,54,62,44,47,62,54,17],
	[17,48,43,51,51,51,51,51,43,52,62,62,62,62,62,62,62,62,48,43,51,51,51,51,51,51,51,51,43,51,51,51,43,51,51,52,62,48,51,51,51,51,49,62,44,45,62,54,17],
	[20,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,68,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,21],	
];

var mapBridge =
[
	[18,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,67,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,19],
	[17,46,42,42,42,42,42,42,42,42,42,47,16,50,47,16,46,42,42,47,16,46,42,42,42,47,16,46,42,42,42,47,16,46,42,42,42,47,16,46,42,47,16,53,16,53,16,53,17],
	[17,54,16,44,49,16,48,45,16,54,16,54,16,16,54,16,48,41,43,43,43,49,16,56,16,48,51,49,16,48,45,16,16,44,45,16,16,44,42,43,43,43,51,41,51,45,16,54,17],
	[17,54,16,54,18,16,19,54,16,54,16,54,16,46,45,16,16,54,16,16,16,16,16,16,16,16,16,16,16,16,48,52,16,48,41,47,16,44,45,16,16,16,16,54,16,54,16,54,17],
	[17,54,16,56,16,53,16,54,16,54,16,54,16,48,43,49,16,48,49,16,48,51,43,43,51,45,16,46,51,42,42,45,16,16,48,41,51,42,45,16,16,53,16,54,16,54,16,54,17],
	[17,54,62,62,62,54,62,54,62,56,62,56,62,62,54,62,48,43,49,62,48,49,62,48,51,43,43,51,45,62,46,51,42,42,45,62,62,48,41,51,42,45,62,54,62,54,62,54,17],
	[17,48,51,47,62,54,62,54,62,62,62,62,62,46,49,62,62,62,62,62,62,62,62,62,62,62,62,62,48,51,49,62,48,43,41,52,62,62,54,62,48,45,62,56,62,48,51,45,17],
	[17,62,62,48,51,45,62,48,51,42,51,47,62,54,62,62,46,42,47,62,46,47,62,46,42,42,47,62,62,62,62,62,62,62,54,62,62,46,47,62,62,54,62,62,62,62,62,54,17],
	[17,53,62,62,62,54,62,62,62,54,62,54,62,44,51,51,43,43,41,51,41,41,42,41,41,41,41,42,51,42,42,42,51,42,41,52,62,44,45,62,46,45,62,46,47,62,44,45,17],
	[17,48,51,47,62,48,54,54,42,49,62,54,62,56,62,62,62,62,56,62,48,43,43,43,43,43,43,49,62,48,43,49,62,48,49,62,62,48,49,62,48,43,51,41,43,47,62,56,17],
	[17,62,62,54,62,62,62,62,54,62,62,54,18,16,16,16,16,16,16,16,16,16,16,16,63,16,16,16,16,16,16,16,16,16,16,16,19,62,62,62,62,62,62,56,62,48,49,62,17],
	[17,47,62,44,51,51,42,51,45,62,46,45,17,5,1,1,11,27,23,23,23,28,5,1,1,1,1,1,1,1,10,1,10,1,10,6,17,46,47,62,53,62,62,62,62,62,62,62,17],
	[17,54,62,54,62,62,54,62,54,62,44,45,17,3,0,4,27,22,22,22,22,30,3,0,0,0,0,0,0,4,38,13,38,13,38,13,17,44,45,62,48,47,62,53,62,46,42,52,17],
	[17,54,62,48,47,62,54,62,54,62,44,45,17,3,0,4,25,22,22,22,26,5,0,0,0,0,0,0,0,4,39,13,39,13,39,13,17,44,45,62,62,54,62,44,42,43,45,62,17],
	[17,54,62,62,54,62,56,62,54,62,48,45,17,3,0,8,25,22,22,22,26,3,0,0,0,0,0,0,0,4,39,13,39,13,39,13,17,48,45,62,46,49,62,44,45,62,44,47,17],
	[17,44,47,62,54,62,62,62,54,62,62,45,17,3,4,27,22,22,22,22,30,3,0,0,0,0,0,0,0,4,39,13,39,13,39,13,17,62,54,62,54,62,62,44,49,62,44,45,17],
	[17,44,45,62,48,51,47,62,44,47,62,54,17,3,4,25,22,22,22,26,5,0,0,0,0,0,0,0,0,4,39,13,39,13,39,13,17,46,45,62,54,47,62,54,62,62,44,45,17],
	[17,44,45,62,62,62,54,62,44,49,62,54,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,4,39,13,39,13,39,13,17,44,45,62,44,41,51,41,47,62,44,45,17],
	[17,44,43,51,47,62,54,62,54,62,62,54,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,4,40,13,40,13,40,13,17,44,49,62,44,45,62,48,45,62,44,49,17],
	[17,54,62,62,54,62,54,62,54,62,46,45,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,1,0,1,0,1,4,17,54,62,62,48,45,62,62,54,62,54,62,17],
	[17,54,62,46,49,62,54,62,54,62,44,45,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,44,47,62,62,54,62,46,45,62,44,52,17],
	[17,54,62,54,62,62,48,51,41,42,41,45,17,3,4,69,69,69,69,69,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,44,45,62,46,45,62,44,41,51,45,62,17],
	[17,54,62,54,62,53,62,62,44,43,41,45,65,3,4,69,69,69,69,69,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,66,44,45,62,44,49,62,44,45,62,48,49,17],
	[17,54,62,54,62,48,51,51,45,62,54,55,17,3,4,69,69,69,69,69,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,44,45,62,54,62,62,44,49,62,62,62,17],
	[17,53,62,54,62,62,62,62,54,62,48,45,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,44,49,62,44,47,62,54,62,62,46,42,62],
	[17,46,51,49,62,50,43,42,41,47,62,54,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,54,62,62,44,45,62,44,47,62,48,41,62],
	[17,54,62,62,62,62,62,48,41,49,62,54,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,44,47,62,44,45,62,44,45,62,62,54,17],
	[17,54,62,46,42,47,62,62,54,62,62,54,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,48,45,62,44,45,62,44,43,42,42,45,17],
	[17,54,62,54,62,48,47,62,44,52,62,54,17,3,4,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,62,54,62,44,45,62,56,62,48,43,49,17],
	[17,54,62,54,62,62,54,62,54,62,62,54,17,3,8,25,22,22,22,26,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,46,49,62,44,45,62,62,62,62,62,62,17],
	[17,54,62,44,47,62,54,62,44,47,62,54,17,13,27,22,22,22,22,30,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,54,62,62,44,45,62,50,42,47,62,53,17],
	[17,54,62,44,45,62,54,62,44,49,62,54,17,13,25,22,22,22,26,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,44,47,62,44,49,62,62,44,43,42,45,17],
	[17,54,62,44,45,62,54,62,54,62,62,54,17,27,22,22,22,22,30,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,48,41,42,45,62,62,46,49,62,44,49,17],
	[17,54,62,44,45,62,54,62,54,62,62,56,17,29,24,24,24,30,9,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,8,17,62,48,43,43,52,62,56,62,62,54,62,17],
	[17,54,62,44,45,62,54,62,44,47,62,62,20,16,16,16,16,16,16,16,16,16,16,16,64,16,16,16,16,16,16,16,16,16,16,16,21,62,62,62,62,62,62,62,62,62,44,47,17],
	[17,54,62,44,43,51,41,51,41,45,62,48,43,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,47,62,46,51,51,51,51,51,51,51,51,51,52,62,62,54,17],
	[17,54,62,54,62,62,54,62,44,45,62,62,62,48,43,41,43,43,43,49,62,48,43,43,43,43,43,49,62,48,49,62,48,42,49,62,62,62,62,62,62,62,62,62,62,62,46,45,17],
	[17,54,62,54,62,46,49,62,44,43,52,62,62,62,62,54,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,54,62,62,46,42,51,47,62,46,51,42,47,62,44,49,17],
	[17,54,62,54,62,54,62,62,54,62,62,62,53,62,46,41,51,51,51,51,42,42,47,62,62,46,51,51,51,52,62,53,62,54,62,50,43,45,62,48,51,45,62,48,49,62,54,62,17],
	[17,54,62,54,62,54,62,46,49,62,44,42,43,51,43,49,62,62,62,62,48,43,45,62,62,54,62,62,54,62,62,54,62,54,62,62,62,54,62,62,62,54,62,62,62,62,44,47,17],
	[17,54,62,54,62,54,62,54,62,62,44,45,62,62,62,62,62,46,47,62,62,62,48,42,42,49,62,46,45,62,46,41,51,43,51,51,51,49,62,62,46,43,51,51,52,62,44,45,17],
	[17,54,62,54,62,54,62,54,62,50,41,41,51,51,51,51,51,43,43,51,47,62,62,48,49,62,62,44,49,62,48,49,62,62,62,62,62,62,62,46,49,62,62,62,62,62,44,45,17],
	[17,54,62,54,62,54,62,54,62,62,44,45,62,62,62,62,62,62,62,62,48,47,62,62,62,62,46,49,62,62,62,62,62,46,42,51,42,42,51,45,62,62,46,51,47,62,48,45,17],
	[17,54,62,62,50,49,62,48,47,62,48,41,42,42,42,42,42,42,47,62,62,48,51,51,51,51,49,62,62,62,50,51,42,43,49,62,48,45,62,48,52,62,54,62,54,62,62,54,17],
	[17,44,47,62,62,62,62,62,54,62,62,48,43,43,43,43,43,43,41,47,62,62,62,62,62,62,62,62,53,62,62,62,54,62,62,62,62,54,62,62,62,62,54,62,44,47,62,54,17],
	[17,48,43,51,51,51,51,51,43,52,62,62,62,62,62,62,62,62,48,43,51,51,51,51,51,51,51,51,43,51,51,51,43,51,51,52,62,48,51,51,51,51,49,62,44,45,62,54,17],
	[20,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,68,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,21],	
];

var mapArea1 =
[
	[145, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124], 
	[145, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 146, 58, 58, 58, 58, 147, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124], 
	[145, 124, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 124, 124, 122, 124, 124, 118, 119, 119, 119, 119, 119, 120, 124, 124, 124, 124, 119, 119, 119, 119, 119, 119, 119, 65, 27, 28, 37, 17, 67, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 124, 124, 124, 124, 124], 
	[145, 124, 126, 38, 5, 143, 138, 8, 33, 5, 38, 6, 38, 29, 30, 38, 120, 124, 124, 124, 124, 124, 124, 124, 124, 124, 133, 4, 4, 4, 66, 143, 139, 139, 139, 139, 138, 40, 7, 17, 17, 38, 4, 31, 32, 4, 131, 132, 130, 132, 133, 38, 4, 143, 138, 8, 7, 4, 124, 124, 124, 124, 6, 7, 26, 4, 44, 45, 17, 73, 64, 86, 87, 62, 75, 7, 7, 7, 4, 4, 4, 4, 34, 4, 4, 124, 124, 124, 124, 124], 
	[145, 124, 126, 1, 7, 144, 137, 7, 21, 15, 9, 9, 9, 12, 9, 9, 130, 122, 122, 122, 122, 122, 122, 122, 122, 130, 9, 9, 7, 7, 4, 144, 141, 141, 141, 141, 137, 7, 49, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 38, 38, 4, 4, 144, 137, 37, 17, 4, 124, 124, 124, 125, 7, 35, 115, 116, 116, 117, 4, 81, 82, 70, 95, 82, 83, 40, 143, 138, 40, 7, 4, 34, 35, 4, 4, 4, 124, 124, 124, 124], 
	[145, 124, 126, 7, 41, 6, 5, 19, 31, 32, 9, 15, 33, 49, 16, 5, 128, 124, 124, 124, 121, 122, 124, 124, 124, 4, 5, 12, 12, 10, 7, 36, 1, 66, 38, 17, 1, 1, 1, 1, 1, 33, 10, 1, 15, 16, 14, 16, 15, 1, 1, 1, 17, 1, 38, 17, 1, 1, 124, 124, 124, 125, 7, 1, 123, 124, 124, 125, 1, 81, 82, 70, 82, 82, 83, 7, 144, 7, 138, 8, 1, 1, 1, 1, 1, 4, 124, 124, 124, 124], 
	[145, 124, 126, 143, 138, 8, 5, 143, 138, 8, 43, 9, 42, 5, 7, 7, 128, 124, 124, 124, 124, 124, 124, 124, 124, 5, 50, 38, 5, 9, 9, 16, 49, 1, 1, 31, 32, 1, 1, 15, 14, 16, 1, 1, 1, 38, 1, 1, 1, 38, 1, 1, 1, 1, 1, 1, 1, 115, 124, 124, 133, 1, 1, 1, 131, 132, 132, 133, 1, 89, 78, 79, 78, 78, 91, 1, 1, 1, 1, 1, 14, 9, 9, 14, 1, 4, 124, 124, 124, 124], 
	[145, 124, 126, 144, 8, 38, 38, 144, 137, 7, 5, 15, 9, 5, 26, 7, 128, 124, 124, 124, 124, 124, 124, 124, 133, 127, 38, 41, 4, 4, 14, 10, 10, 4, 4, 4, 13, 38, 6, 6, 6, 6, 6, 4, 143, 138, 8, 7, 4, 4, 4, 4, 37, 4, 41, 6, 115, 124, 124, 133, 6, 13, 9, 9, 9, 12, 12, 9, 12, 13, 9, 9, 9, 12, 9, 9, 12, 9, 9, 9, 9, 9, 14, 11, 14, 4, 4, 131, 124, 124], 
	[145, 124, 126, 1, 144, 8, 2, 2, 37, 2, 5, 21, 9, 13, 18, 6, 128, 124, 124, 124, 124, 124, 124, 133, 127, 127, 4, 7, 17, 5, 5, 4, 15, 9, 9, 3, 3, 37, 3, 6, 6, 6, 6, 66, 144, 137, 7, 4, 18, 18, 16, 4, 66, 41, 4, 115, 124, 124, 133, 5, 9, 16, 7, 5, 14, 15, 15, 2, 5, 4, 4, 5, 16, 16, 5, 5, 5, 5, 14, 14, 44, 45, 9, 14, 5, 4, 4, 127, 124, 124], 
	[145, 124, 126, 1, 5, 2, 2, 5, 5, 49, 5, 16, 15, 43, 6, 7, 128, 124, 124, 124, 124, 133, 50, 3, 3, 14, 7, 4, 20, 4, 49, 4, 5, 5, 16, 9, 3, 3, 42, 148, 58, 58, 58, 58, 58, 58, 149, 66, 4, 4, 15, 13, 4, 4, 4, 123, 124, 133, 4, 13, 7, 5, 5, 5, 5, 25, 36, 35, 4, 4, 26, 4, 4, 5, 6, 6, 5, 13, 16, 21, 5, 14, 9, 5, 5, 4, 4, 26, 124, 124], 
	[145, 124, 134, 1, 52, 53, 2, 5, 38, 5, 9, 9, 9, 9, 40, 7, 128, 124, 124, 124, 124, 51, 36, 11, 3, 3, 36, 37, 4, 20, 4, 4, 4, 41, 17, 16, 9, 3, 3, 73, 87, 74, 74, 74, 87, 63, 75, 8, 7, 7, 5, 4, 4, 13, 130, 122, 122, 130, 13, 7, 5, 5, 5, 5, 6, 6, 6, 4, 4, 6, 6, 6, 6, 6, 16, 13, 13, 13, 5, 7, 4, 5, 4, 5, 5, 4, 4, 127, 124, 124], 
	[145, 124, 124, 117, 6, 5, 2, 5, 5, 15, 9, 49, 16, 5, 5, 6, 128, 124, 124, 124, 124, 117, 14, 3, 3, 3, 52, 53, 148, 58, 58, 149, 38, 4, 44, 45, 9, 3, 3, 81, 95, 82, 82, 82, 72, 71, 83, 40, 7, 1, 5, 5, 13, 13, 51, 123, 124, 4, 4, 143, 8, 137, 8, 7, 6, 6, 25, 35, 6, 7, 4, 43, 4, 13, 13, 13, 4, 115, 116, 47, 116, 117, 5, 143, 138, 8, 7, 127, 124, 124], 
	[145, 124, 124, 133, 7, 5, 40, 2, 21, 9, 12, 51, 5, 5, 6, 7, 128, 124, 124, 124, 124, 124, 4, 3, 10, 5, 5, 17, 73, 87, 84, 75, 8, 8, 31, 32, 9, 15, 3, 81, 82, 101, 102, 82, 82, 82, 83, 8, 19, 49, 1, 13, 9, 5, 6, 123, 124, 20, 4, 144, 137, 8, 6, 27, 28, 6, 6, 6, 6, 4, 4, 21, 16, 13, 4, 41, 42, 123, 124, 122, 124, 125, 5, 144, 137, 7, 41, 127, 124, 124], 
	[145, 124, 118, 1, 7, 5, 2, 14, 5, 9, 15, 25, 2, 2, 6, 6, 136, 124, 124, 124, 124, 124, 4, 37, 3, 10, 7, 4, 81, 95, 92, 83, 31, 32, 7, 7, 11, 13, 3, 89, 90, 109, 110, 90, 80, 90, 91, 41, 5, 3, 3, 9, 4, 5, 115, 124, 118, 4, 6, 6, 7, 4, 43, 4, 6, 6, 44, 45, 39, 6, 6, 21, 16, 13, 6, 6, 4, 123, 124, 122, 124, 125, 4, 4, 25, 4, 4, 127, 124, 124], 
	[145, 124, 126, 1, 7, 6, 26, 5, 21, 9, 5, 5, 27, 28, 5, 115, 124, 124, 124, 124, 124, 133, 143, 138, 8, 7, 13, 7, 81, 70, 82, 83, 8, 66, 7, 20, 7, 9, 3, 3, 34, 8, 8, 40, 8, 7, 5, 5, 5, 3, 9, 10, 4, 115, 124, 124, 126, 5, 66, 4, 4, 4, 4, 4, 4, 4, 4, 40, 4, 4, 4, 4, 4, 13, 13, 4, 4, 131, 132, 130, 132, 133, 6, 6, 42, 4, 4, 127, 124, 124], 
	[145, 124, 126, 6, 6, 43, 5, 5, 5, 12, 5, 36, 2, 2, 5, 131, 124, 124, 124, 124, 124, 50, 144, 137, 7, 17, 12, 4, 89, 90, 79, 91, 52, 53, 4, 4, 5, 9, 9, 3, 44, 45, 8, 8, 8, 49, 5, 3, 3, 9, 16, 37, 115, 124, 124, 133, 5, 5, 5, 36, 27, 28, 3, 66, 143, 139, 139, 139, 139, 138, 8, 7, 3, 4, 13, 5, 4, 20, 4, 7, 3, 3, 3, 4, 4, 20, 52, 53, 124, 124], 
	[145, 124, 126, 44, 45, 20, 5, 35, 15, 10, 5, 5, 2, 43, 5, 7, 120, 124, 124, 124, 124, 117, 3, 3, 3, 3, 15, 7, 4, 66, 29, 30, 31, 32, 37, 5, 5, 7, 9, 6, 31, 32, 5, 5, 5, 3, 3, 3, 13, 13, 3, 1, 123, 124, 133, 43, 38, 5, 5, 4, 4, 43, 4, 66, 144, 141, 141, 141, 141, 137, 7, 3, 3, 3, 10, 10, 5, 4, 13, 16, 4, 4, 27, 28, 4, 4, 127, 35, 124, 124], 
	[145, 124, 126, 38, 33, 5, 37, 140, 21, 9, 43, 142, 39, 20, 13, 7, 128, 124, 124, 124, 124, 124, 124, 117, 4, 3, 41, 17, 20, 7, 143, 139, 139, 139, 138, 8, 7, 7, 6, 9, 12, 12, 12, 6, 43, 44, 45, 9, 9, 2, 3, 1, 123, 124, 26, 4, 148, 58, 58, 58, 58, 58, 58, 58, 58, 58, 149, 2, 2, 35, 20, 8, 7, 7, 5, 16, 10, 10, 2, 2, 43, 2, 2, 21, 2, 4, 4, 127, 124, 124], 
	[145, 124, 126, 7, 7, 37, 5, 140, 41, 12, 6, 142, 8, 36, 5, 7, 128, 124, 124, 124, 124, 124, 124, 124, 117, 7, 16, 4, 14, 4, 36, 46, 47, 48, 142, 8, 7, 9, 9, 51, 5, 5, 16, 12, 9, 9, 9, 9, 7, 2, 3, 49, 123, 124, 127, 4, 65, 49, 16, 9, 52, 53, 4, 143, 138, 8, 67, 40, 7, 2, 15, 16, 27, 28, 8, 5, 10, 52, 53, 11, 3, 11, 3, 3, 44, 45, 4, 127, 124, 124], 
	[145, 124, 126, 36, 7, 2, 19, 140, 39, 10, 6, 142, 39, 66, 31, 32, 128, 124, 124, 124, 124, 124, 124, 124, 125, 4, 7, 13, 44, 45, 7, 54, 55, 56, 51, 16, 9, 9, 6, 5, 41, 7, 5, 5, 5, 5, 2, 10, 10, 2, 3, 7, 123, 124, 116, 117, 65, 66, 37, 66, 21, 6, 6, 144, 5, 7, 67, 8, 8, 7, 16, 13, 2, 2, 40, 8, 3, 3, 16, 3, 3, 3, 3, 3, 3, 3, 4, 127, 124, 124], 
	[145, 124, 126, 23, 34, 43, 5, 140, 6, 12, 23, 142, 8, 16, 37, 7, 128, 124, 124, 124, 124, 124, 124, 124, 125, 4, 15, 4, 4, 4, 14, 7, 6, 9, 6, 9, 6, 6, 5, 4, 4, 36, 4, 50, 5, 5, 5, 5, 9, 9, 7, 1, 131, 124, 124, 125, 73, 74, 85, 86, 74, 74, 74, 74, 74, 87, 75, 40, 7, 4, 4, 2, 2, 2, 2, 2, 41, 10, 10, 7, 3, 3, 3, 3, 3, 4, 26, 127, 124, 124], 
	[145, 124, 126, 35, 19, 35, 21, 140, 6, 9, 4, 142, 39, 6, 37, 34, 128, 124, 124, 124, 124, 124, 124, 124, 125, 4, 4, 40, 4, 15, 11, 6, 9, 6, 11, 15, 6, 36, 41, 4, 148, 149, 8, 40, 8, 8, 4, 4, 5, 9, 9, 7, 37, 131, 124, 125, 81, 70, 93, 70, 82, 82, 82, 82, 70, 95, 83, 8, 2, 2, 33, 6, 31, 32, 2, 2, 3, 3, 10, 25, 26, 3, 3, 41, 3, 4, 4, 127, 124, 124], 
	[145, 124, 126, 36, 26, 31, 32, 140, 21, 9, 21, 142, 29, 30, 2, 16, 127, 131, 124, 124, 124, 124, 124, 124, 125, 4, 52, 53, 7, 7, 9, 9, 5, 5, 5, 5, 40, 42, 4, 4, 73, 75, 7, 8, 31, 32, 8, 4, 4, 5, 13, 7, 4, 5, 123, 125, 89, 90, 90, 80, 90, 78, 79, 90, 78, 90, 91, 2, 41, 2, 2, 20, 6, 6, 2, 34, 2, 3, 10, 3, 3, 3, 5, 5, 34, 4, 4, 127, 124, 124], 
	[145, 124, 126, 20, 143, 139, 139, 139, 139, 151, 139, 139, 139, 139, 138, 40, 7, 5, 124, 124, 124, 124, 124, 124, 125, 4, 4, 36, 14, 4, 7, 5, 5, 15, 5, 5, 5, 40, 4, 49, 81, 83, 7, 4, 40, 4, 4, 18, 4, 4, 2, 9, 4, 5, 123, 125, 6, 44, 45, 4, 4, 4, 4, 4, 4, 25, 137, 2, 2, 2, 2, 41, 2, 6, 6, 6, 13, 3, 10, 3, 3, 49, 3, 5, 5, 25, 4, 127, 124, 124], 
	[145, 124, 126, 49, 140, 143, 139, 139, 139, 139, 139, 139, 139, 138, 142, 8, 15, 3, 124, 124, 124, 124, 124, 124, 124, 134, 1, 4, 4, 44, 45, 5, 17, 5, 5, 37, 140, 4, 4, 4, 89, 91, 4, 4, 4, 44, 45, 4, 6, 34, 4, 9, 127, 115, 124, 125, 4, 34, 16, 4, 4, 4, 4, 49, 15, 15, 25, 35, 4, 2, 2, 2, 2, 2, 2, 2, 2, 16, 10, 10, 3, 3, 14, 143, 138, 8, 7, 115, 124, 124], 
	[145, 124, 126, 66, 140, 140, 143, 139, 139, 139, 139, 139, 138, 142, 142, 8, 13, 3, 124, 124, 124, 124, 124, 124, 124, 124, 117, 1, 4, 4, 7, 52, 53, 143, 139, 139, 8, 139, 138, 8, 31, 32, 4, 4, 4, 17, 144, 8, 138, 8, 13, 4, 115, 124, 124, 133, 2, 12, 12, 12, 12, 12, 2, 12, 12, 2, 6, 25, 36, 4, 4, 15, 17, 10, 10, 2, 2, 2, 2, 10, 2, 2, 3, 144, 137, 115, 116, 124, 124, 124], 
	[145, 124, 126, 41, 140, 140, 140, 143, 139, 139, 139, 138, 142, 142, 142, 8, 7, 5, 124, 124, 124, 124, 124, 124, 124, 124, 124, 116, 117, 1, 4, 4, 4, 144, 141, 141, 141, 141, 137, 40, 7, 6, 6, 42, 6, 6, 6, 144, 137, 8, 130, 122, 122, 122, 122, 130, 12, 15, 4, 27, 28, 6, 6, 7, 7, 2, 11, 11, 9, 9, 9, 9, 9, 6, 16, 11, 11, 11, 11, 11, 13, 14, 13, 4, 128, 124, 124, 124, 124, 124], 
	[145, 124, 126, 66, 140, 140, 140, 140, 140, 141, 142, 142, 142, 142, 142, 8, 7, 3, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 125, 1, 1, 29, 30, 31, 32, 40, 4, 17, 17, 4, 44, 45, 51, 40, 4, 4, 4, 4, 4, 4, 115, 124, 124, 124, 124, 4, 4, 25, 36, 4, 4, 4, 4, 4, 26, 4, 4, 4, 4, 4, 4, 42, 26, 4, 4, 4, 4, 4, 4, 4, 16, 3, 13, 16, 128, 124, 124, 124, 124, 124], 
	[145, 124, 126, 49, 140, 140, 140, 144, 141, 141, 141, 137, 142, 142, 142, 8, 16, 4, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 116, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 136, 124, 124, 124, 124, 124, 134, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 114, 135, 135, 136, 124, 124, 124, 124, 124], 
	[145, 124, 126, 66, 140, 140, 144, 141, 141, 141, 141, 141, 137, 142, 142, 40, 13, 3, 124, 124, 124, 124, 124, 121, 122, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 65, 36, 25, 35, 42, 27, 28, 67, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 122, 124, 124, 124, 124, 124, 124, 124, 124], 
	[145, 124, 126, 66, 140, 144, 141, 141, 141, 141, 141, 141, 141, 137, 142, 8, 7, 115, 124, 124, 124, 124, 124, 124, 122, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 118, 119, 119, 119, 73, 63, 87, 74, 62, 86, 85, 75, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 130, 119, 119, 119, 119, 119, 120, 124, 124], 
	[145, 124, 126, 41, 144, 141, 141, 141, 141, 141, 141, 141, 141, 141, 137, 7, 3, 124, 124, 124, 124, 124, 124, 124, 122, 124, 124, 124, 124, 124, 124, 124, 124, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 124, 129, 124, 118, 119, 119, 127, 22, 29, 30, 81, 71, 95, 82, 82, 72, 93, 83, 40, 8, 7, 7, 5, 33, 52, 53, 51, 4, 5, 4, 34, 34, 43, 49, 128, 124, 124], 
	[145, 124, 126, 1, 35, 6, 31, 32, 1, 26, 26, 1, 1, 1, 9, 1, 128, 124, 124, 124, 124, 124, 124, 121, 122, 122, 122, 122, 122, 122, 124, 124, 124, 126, 51, 143, 139, 139, 139, 139, 138, 8, 7, 7, 17, 127, 127, 127, 35, 42, 49, 127, 127, 127, 127, 127, 127, 21, 127, 52, 53, 66, 22, 81, 82, 82, 82, 82, 72, 82, 83, 8, 39, 7, 18, 44, 45, 6, 11, 11, 11, 11, 4, 6, 143, 138, 8, 128, 124, 124], 
	[145, 124, 126, 1, 1, 6, 41, 14, 9, 1, 1, 1, 15, 6, 1, 6, 128, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 122, 124, 124, 124, 126, 21, 144, 141, 141, 141, 141, 137, 8, 7, 13, 127, 15, 9, 4, 11, 11, 11, 11, 11, 11, 11, 11, 4, 127, 17, 127, 127, 17, 22, 81, 82, 103, 104, 82, 82, 82, 83, 8, 49, 5, 5, 4, 4, 11, 16, 5, 5, 5, 5, 49, 144, 137, 7, 128, 124, 124], 
	[145, 124, 134, 1, 4, 35, 13, 13, 41, 6, 9, 6, 1, 1, 1, 1, 128, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 122, 124, 124, 124, 126, 51, 21, 42, 31, 32, 34, 35, 4, 13, 9, 9, 4, 4, 49, 143, 138, 40, 7, 127, 127, 127, 4, 38, 16, 16, 6, 127, 44, 45, 89, 90, 111, 112, 90, 80, 90, 91, 22, 22, 11, 16, 4, 22, 22, 22, 52, 53, 5, 21, 5, 66, 17, 5, 128, 124, 124], 
	[145, 124, 124, 134, 1, 1, 1, 1, 1, 1, 6, 6, 1, 1, 1, 1, 136, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 121, 122, 122, 122, 122, 122, 130, 33, 127, 35, 17, 16, 13, 4, 22, 22, 127, 13, 39, 127, 143, 38, 137, 7, 17, 127, 18, 43, 127, 127, 127, 11, 11, 11, 4, 22, 22, 11, 11, 14, 14, 11, 11, 22, 15, 22, 22, 5, 5, 5, 5, 42, 43, 5, 5, 5, 5, 5, 18, 5, 128, 124, 124], 
	[145, 124, 124, 124, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 136, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 134, 135, 135, 135, 135, 135, 135, 135, 135, 122, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 136, 124, 124], 
	[145, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 122, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124],
	[145, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 150, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124],
];

var mapArea2 =
[
	[5, 26, 26, 26, 4, 5, 26, 26, 26, 26, 26, 26, 4, 14, 53, 53, 53, 53, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 53, 5, 4, 49, 50, 14, 5, 26, 26, 26, 26, 61, 26, 26, 26, 4],
	[15, 53, 53, 21, 13, 15, 16, 17, 9, 10, 41, 53, 25, 4, 49, 50, 49, 50, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 5, 27, 25, 26, 26, 26, 27, 53, 44, 45, 41, 41, 41, 41, 41, 13], 
	[15, 49, 50, 41, 13, 15, 28, 29, 41, 21, 53, 41, 53, 25, 4, 21, 21, 21, 21, 21, 9, 10, 14, 42, 43, 42, 43, 42, 43, 41, 16, 17, 41, 5, 27, 41, 41, 6, 7, 7, 7, 8, 56, 57, 21, 21, 21, 44, 45, 13],
	[15, 41, 53, 53, 13, 15, 14, 53, 53, 41, 21, 53, 41, 53, 25, 4, 21, 21, 41, 21, 21, 21, 21, 54, 55, 54, 55, 54, 55, 41, 28, 29, 5, 27, 41, 21, 21, 18, 19, 19, 19, 20, 41, 21, 21, 21, 21, 56, 57, 13], 
	[15, 53, 53, 53, 13, 15, 53, 21, 21, 53, 41, 21, 53, 41, 53, 13, 41, 6, 7, 8, 16, 17, 21, 21, 21, 21, 41, 41, 41, 21, 21, 5, 27, 41, 44, 45, 21, 18, 19, 19, 19, 20, 6, 7, 7, 7, 8, 21, 21, 13],
	[15, 53, 49, 50, 25, 27, 53, 53, 21, 53, 41, 21, 21, 41, 53, 13, 41, 18, 19, 20, 28, 29, 41, 41, 41, 41, 41, 41, 41, 21, 5, 27, 41, 21, 56, 57, 21, 18, 19, 19, 19, 20, 18, 19, 19, 19, 20, 21, 21, 13], 
	[15, 35, 39, 40, 39, 40, 39, 40, 36, 53, 53, 41, 21, 41, 53, 13, 41, 30, 31, 32, 21, 41, 41, 41, 21, 21, 41, 41, 21, 5, 27, 41, 6, 7, 7, 7, 8, 30, 31, 31, 31, 32, 18, 19, 19, 19, 20, 21, 21, 13],
	[15, 53, 51, 52, 51, 52, 51, 52, 53, 14, 46, 39, 40, 36, 21, 13, 21, 49, 50, 41, 41, 41, 41, 16, 17, 5, 26, 26, 26, 27, 44, 45, 30, 31, 31, 31, 32, 41, 44, 45, 44, 45, 18, 19, 19, 19, 20, 21, 21, 13],
	[15, 21, 53, 53, 53, 41, 53, 53, 53, 53, 21, 51, 52, 21, 53, 13, 21, 21, 41, 41, 41, 41, 21, 28, 29, 15, 21, 41, 21, 21, 56, 57, 21, 41, 21, 21, 41, 41, 56, 57, 56, 57, 30, 31, 31, 31, 32, 21, 21, 13], 
	[15, 53, 53, 53, 21, 53, 41, 41, 53, 53, 21, 41, 21, 41, 21, 25, 4, 41, 41, 21, 21, 21, 21, 21, 21, 15, 41, 11, 12, 21, 21, 41, 41, 21, 21, 41, 41, 21, 21, 44, 45, 6, 7, 7, 7, 8, 44, 45, 21, 13],
	[15, 53, 49, 50, 53, 53, 53, 53, 41, 21, 41, 41, 53, 21, 53, 21, 25, 4, 21, 41, 21, 41, 5, 26, 26, 27, 14, 23, 24, 41, 21, 41, 21, 21, 41, 21, 21, 21, 21, 56, 57, 18, 19, 19, 19, 20, 56, 57, 21, 13],
	[15, 35, 39, 40, 39, 40, 36, 53, 53, 14, 21, 53, 21, 41, 21, 53, 21, 14, 41, 21, 21, 46, 39, 40, 47, 21, 21, 21, 41, 21, 41, 21, 21, 21, 21, 21, 44, 45, 21, 41, 41, 18, 19, 19, 19, 20, 21, 21, 21, 13],
	[15, 14, 51, 52, 51, 52, 11, 12, 21, 41, 41, 21, 41, 21, 53, 41, 53, 21, 21, 21, 53, 21, 51, 52, 21, 21, 21, 41, 21, 21, 21, 21, 21, 21, 44, 45, 56, 57, 41, 21, 21, 18, 19, 19, 19, 20, 21, 21, 21, 13], 
	[15, 6, 7, 7, 7, 8, 23, 24, 41, 21, 41, 41, 21, 21, 41, 41, 21, 21, 53, 53, 41, 21, 21, 41, 41, 41, 21, 21, 41, 41, 41, 41, 41, 21, 56, 57, 44, 45, 53, 53, 21, 30, 31, 31, 31, 32, 21, 21, 21, 13],
	[15, 18, 19, 19, 19, 20, 53, 21, 41, 53, 53, 1, 2, 3, 21, 21, 21, 41, 41, 41, 21, 53, 21, 41, 53, 53, 53, 53, 53, 53, 53, 44, 45, 41, 41, 41, 56, 57, 44, 45, 21, 41, 41, 41, 41, 41, 41, 41, 21, 13],
	[15, 18, 19, 19, 19, 20, 21, 53, 53, 53, 41, 13, 41, 15, 41, 21, 53, 41, 21, 21, 21, 21, 21, 21, 21, 53, 53, 53, 53, 53, 53, 56, 57, 41, 41, 41, 41, 41, 56, 57, 44, 45, 53, 41, 41, 41, 21, 41, 41, 13], 
	[15, 18, 19, 19, 19, 20, 41, 53, 53, 53, 53, 25, 26, 27, 21, 21, 41, 21, 21, 53, 53, 41, 41, 41, 21, 21, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 44, 45, 56, 57, 53, 53, 53, 44, 45, 53, 53, 13],
	[15, 30, 31, 31, 31, 32, 53, 53, 53, 53, 53, 41, 41, 21, 21, 21, 21, 35, 39, 40, 36, 41, 21, 21, 21, 21, 13, 14, 41, 41, 21, 53, 41, 41, 44, 45, 53, 15, 56, 57, 53, 53, 53, 41, 41, 56, 57, 53, 53, 13],
	[15, 35, 39, 40, 39, 40, 47, 41, 53, 53, 35, 39, 40, 59, 21, 21, 21, 14, 51, 52, 41, 21, 21, 21, 21, 21, 13, 49, 50, 41, 41, 41, 41, 41, 56, 57, 21, 15, 53, 41, 41, 41, 41, 41, 53, 53, 53, 53, 53, 13], 
	[15, 53, 51, 52, 51, 52, 35, 39, 40, 47, 53, 51, 52, 21, 41, 21, 6, 7, 7, 8, 21, 21, 21, 21, 21, 21, 13, 53, 46, 39, 40, 47, 53, 53, 41, 41, 41, 15, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 41, 13], 
	[15, 11, 12, 41, 35, 39, 40, 60, 52, 53, 41, 6, 7, 7, 7, 8, 18, 19, 19, 20, 46, 39, 40, 36, 21, 21, 13, 16, 17, 51, 52, 53, 53, 53, 53, 49, 50, 15, 53, 53, 53, 41, 41, 41, 53, 53, 53, 53, 53, 13],
	[15, 23, 24, 41, 53, 51, 48, 39, 40, 36, 53, 18, 19, 19, 19, 20, 18, 19, 19, 20, 41, 51, 52, 41, 21, 21, 13, 28, 29, 53, 53, 53, 53, 53, 53, 53, 53, 15, 35, 39, 40, 36, 53, 41, 41, 53, 53, 53, 41, 13], 
	[15, 53, 53, 53, 53, 53, 53, 51, 52, 41, 41, 18, 19, 19, 19, 20, 30, 31, 31, 32, 21, 21, 21, 21, 21, 41, 25, 26, 26, 4, 6, 7, 7, 8, 5, 26, 26, 27, 21, 51, 52, 53, 53, 53, 53, 53, 53, 53, 41, 13],
	[15, 53, 53, 53, 53, 41, 53, 35, 39, 40, 47, 30, 31, 31, 31, 32, 41, 41, 53, 53, 41, 21, 21, 21, 21, 21, 41, 11, 12, 13, 18, 19, 19, 20, 15, 41, 35, 39, 40, 36, 53, 53, 53, 41, 53, 53, 53, 53, 53, 13], 
	[15, 41, 53, 53, 53, 53, 53, 53, 51, 52, 53, 41, 41, 35, 39, 40, 47, 53, 53, 6, 7, 8, 41, 21, 21, 21, 21, 23, 24, 13, 30, 31, 31, 32, 15, 42, 43, 51, 52, 42, 43, 41, 41, 53, 53, 53, 53, 53, 53, 13],
	[15, 35, 39, 40, 47, 53, 53, 35, 39, 40, 39, 40, 36, 53, 51, 48, 39, 40, 59, 18, 19, 20, 21, 21, 35, 39, 40, 47, 1, 34, 53, 41, 21, 53, 15, 54, 55, 49, 50, 54, 55, 41, 41, 53, 53, 53, 53, 42, 43, 13], 
	[15, 41, 51, 52, 41, 53, 53, 53, 51, 52, 51, 52, 53, 35, 39, 40, 60, 52, 21, 30, 31, 32, 21, 21, 21, 51, 52, 1, 34, 53, 41, 41, 53, 5, 27, 42, 43, 21, 53, 53, 53, 41, 53, 41, 41, 41, 53, 54, 55, 13],
	[15, 41, 35, 39, 40, 47, 53, 53, 35, 39, 40, 36, 53, 53, 51, 52, 53, 21, 21, 21, 21, 21, 58, 39, 40, 47, 1, 34, 53, 41, 41, 53, 5, 27, 21, 54, 55, 53, 53, 53, 53, 41, 53, 53, 42, 43, 42, 43, 41, 13],
	[15, 21, 41, 51, 52, 41, 35, 39, 40, 60, 52, 14, 53, 41, 41, 21, 21, 21, 21, 21, 21, 21, 53, 51, 52, 1, 34, 49, 50, 41, 41, 5, 27, 16, 17, 49, 50, 53, 53, 53, 41, 53, 53, 53, 54, 55, 54, 55, 53, 13],
	[15, 21, 41, 21, 41, 21, 53, 51, 48, 39, 40, 36, 21, 21, 21, 21, 21, 21, 21, 53, 58, 39, 40, 47, 1, 34, 49, 50, 41, 53, 5, 27, 21, 28, 29, 53, 53, 35, 39, 40, 36, 53, 41, 41, 53, 42, 43, 53, 53, 13], 
	[15, 41, 21, 21, 21, 21, 21, 49, 50, 51, 52, 21, 41, 21, 58, 39, 40, 47, 21, 21, 21, 51, 52, 53, 13, 41, 41, 41, 53, 5, 27, 35, 39, 40, 36, 41, 53, 53, 51, 52, 41, 41, 53, 53, 53, 54, 55, 53, 53, 13], 
	[15, 14, 21, 41, 6, 7, 7, 8, 49, 50, 21, 21, 21, 21, 21, 51, 52, 1, 2, 2, 2, 2, 2, 2, 34, 53, 41, 53, 5, 27, 49, 50, 51, 52, 41, 53, 53, 21, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 13],
	[15, 42, 43, 21, 18, 19, 19, 20, 6, 7, 7, 8, 21, 21, 41, 53, 53, 13, 53, 53, 53, 41, 41, 53, 53, 53, 41, 41, 15, 14, 35, 39, 40, 36, 53, 53, 53, 53, 53, 53, 53, 41, 53, 53, 41, 41, 53, 53, 53, 13],
	[15, 54, 55, 21, 30, 31, 31, 32, 30, 31, 31, 32, 21, 41, 21, 1, 2, 34, 53, 41, 41, 41, 41, 41, 41, 41, 41, 5, 27, 53, 53, 51, 52, 41, 53, 41, 21, 35, 39, 40, 36, 53, 53, 41, 53, 53, 53, 53, 53, 13], 
	[15, 21, 21, 21, 21, 21, 6, 7, 7, 8, 42, 43, 21, 41, 21, 13, 53, 53, 41, 41, 53, 53, 41, 53, 41, 5, 26, 27, 14, 21, 53, 41, 53, 53, 53, 35, 39, 40, 60, 52, 21, 53, 41, 41, 53, 53, 53, 11, 12, 13],
	[15, 21, 21, 41, 21, 21, 30, 31, 31, 32, 54, 55, 21, 21, 21, 13, 53, 53, 41, 53, 49, 50, 5, 26, 26, 27, 53, 53, 41, 53, 41, 53, 41, 35, 39, 40, 60, 52, 14, 21, 21, 53, 46, 39, 40, 36, 41, 23, 24, 13], 
	[15, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 13, 41, 41, 9, 10, 14, 5, 27, 14, 9, 10, 53, 41, 41, 53, 53, 35, 39, 40, 60, 48, 39, 40, 36, 21, 41, 53, 53, 51, 52, 41, 53, 11, 12, 13],
	[15, 21, 21, 21, 21, 42, 43, 21, 21, 21, 41, 21, 41, 21, 21, 13, 53, 41, 41, 53, 53, 15, 14, 9, 10, 53, 41, 53, 53, 35, 39, 40, 60, 48, 39, 40, 60, 52, 53, 46, 39, 40, 36, 11, 12, 53, 53, 23, 24, 13], 
	[15, 49, 50, 21, 21, 54, 55, 21, 21, 41, 21, 21, 21, 41, 41, 13, 53, 53, 41, 49, 50, 15, 53, 1, 2, 3, 53, 53, 49, 50, 51, 48, 39, 40, 60, 52, 14, 53, 53, 53, 51, 52, 53, 23, 24, 53, 41, 53, 53, 13], 
	[15, 14, 35, 39, 40, 36, 21, 21, 21, 21, 21, 21, 41, 41, 41, 13, 49, 50, 41, 41, 53, 33, 2, 34, 41, 33, 2, 2, 2, 2, 2, 34, 51, 48, 39, 40, 36, 41, 41, 53, 53, 53, 41, 53, 41, 53, 53, 11, 12, 13],
	[15, 41, 53, 51, 52, 41, 21, 21, 21, 21, 46, 39, 40, 47, 53, 25, 4, 53, 41, 41, 41, 49, 50, 41, 53, 53, 53, 53, 41, 41, 41, 53, 53, 53, 51, 48, 39, 40, 39, 40, 36, 53, 53, 53, 53, 11, 12, 23, 24, 13], 
	[15, 42, 43, 21, 41, 41, 21, 21, 35, 39, 40, 60, 52, 9, 10, 14, 13, 53, 53, 53, 41, 41, 53, 53, 53, 49, 50, 53, 53, 53, 53, 53, 53, 41, 41, 41, 51, 52, 51, 52, 41, 53, 41, 41, 53, 23, 24, 53, 53, 13], 
	[15, 54, 55, 21, 41, 41, 41, 21, 21, 51, 52, 41, 35, 39, 40, 36, 13, 49, 50, 53, 53, 53, 53, 5, 26, 26, 26, 26, 26, 26, 26, 53, 53, 53, 53, 41, 41, 41, 53, 53, 41, 53, 35, 39, 40, 36, 53, 35, 39, 40], 
	[15, 21, 21, 53, 41, 41, 41, 53, 41, 41, 35, 39, 40, 60, 52, 41, 25, 26, 26, 26, 26, 26, 26, 27, 49, 50, 14, 9, 10, 53, 53, 53, 41, 53, 53, 53, 53, 53, 53, 41, 53, 53, 53, 51, 52, 35, 39, 40, 60, 52],
	[15, 21, 41, 35, 39, 40, 47, 41, 53, 21, 21, 51, 48, 39, 40, 47, 53, 35, 39, 40, 36, 14, 53, 53, 53, 49, 50, 53, 53, 53, 53, 53, 53, 53, 53, 41, 35, 39, 40, 36, 53, 41, 53, 53, 42, 43, 51, 48, 39, 40], 
	[15, 21, 41, 53, 51, 52, 21, 21, 21, 21, 53, 41, 41, 51, 52, 53, 41, 53, 51, 52, 53, 49, 50, 53, 53, 53, 53, 53, 53, 53, 14, 9, 10, 49, 50, 53, 53, 51, 52, 53, 53, 53, 53, 53, 54, 55, 9, 10, 51, 52],
	[15, 21, 41, 41, 41, 41, 21, 41, 53, 21, 21, 53, 41, 53, 53, 41, 53, 53, 53, 49, 50, 35, 39, 40, 39, 40, 39, 40, 39, 40, 39, 40, 39, 40, 39, 40, 39, 40, 39, 40, 39, 40, 39, 40, 39, 40, 39, 40, 39, 40], 
	[15, 21, 41, 41, 21, 21, 41, 35, 39, 40, 47, 53, 53, 53, 53, 53, 53, 53, 49, 50, 49, 50, 51, 52, 51, 52, 51, 52, 51, 52, 51, 52, 51, 52, 51, 52, 51, 52, 51, 52, 51, 52, 51, 52, 51, 52, 51, 52, 51, 52], 
	[27, 41, 41, 21, 41, 21, 21, 21, 51, 52, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43, 42, 43],
	[53, 53, 41, 21, 21, 21, 21, 41, 53, 53, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55, 54, 55],       
];

var mapAreaBoss = 
[
[5,	1,	10,	1,	1,	10,	1,	1,	1,	10,	1,	1,	10,	1,	8],
[2,	15,	18,	18,	19,	19,	18,	19,	18,	19,	19,	18,	18,	15,	4],
[2,	14,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	12,	17,	4],
[2,	14,	12,	15,	12,	12,	12,	9,	12,	12,	12,	15,	9,	17,	4],
[2,	14,	12,	12,	12,	12,	12,	12,	12,	12,	9,	9,	9,	17,	4],
[2,	14,	12,	12,	12,	9,	9,	12,	9,	9,	9,	9,	9,	17,	4],
[2,	14,	9,	9,	9,	9,	9,	12,	12,	9,	9,	9,	9,	17,	4],
[2,	14,	9,	9,	9,	9,	9,	12,	9,	12,	12,	9,	9,	17,	4],
[2,	14,	9,	12,	12,	12,	9,	9,	9,	9,	12,	9,	9,	17,	4],
[2,	14,	12,	9,	9,	9,	12,	9,	9,	9,	9,	9,	9,	17,	4],
[2,	14,	12,	9,	9,	9,	9,	9,	9,	9,	9,	9,	9,	17,	4],
[2,	14,	12,	15,	9,	9,	9,	9,	12,	12,	9,	15,	9,	17,	4],
[2,	14,	12,	9,	9,	12,	9,	12,	12,	12,	9,	9,	12,	17,	4],
[2,	15,	9,	12,	12,	12,	9,	9,	12,	12,	12,	9,	12,	15,	4],
[6,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	7],
];

var ROWS = map.length;
var COLS = map[0].length;

var ROWSAREA1 = mapArea1.length;
var COLSAREA1 = mapArea1[0].length;

var ROWSAREA2 = mapArea2.length;
var COLSAREA2 = mapArea2[0].length;

var ROWSBOSS = mapAreaBoss.length;
var COLSBOSS = mapAreaBoss[0].length;


window.addEventListener("keydown", onKeyDown);
window.addEventListener("keyup", onKeyUp);

window.addEventListener("click", clickItem);

canvas.addEventListener("mousedown", boomerangAttack);

createMap();

var fps = 60;
var updateInterval;

function update()
{
if (mainMenuOpen || optMenuOpen || controlsMenuOpen) {
		mus_Menu.play();
		mus_Game.pause();
		sfx_Boss_Flower.pause();
		sfx_Boomerang.pause();
		sfx_Enemy_Mushroom.pause();
		mus_Boss_Flower.pause();
		
		renderMenu();
	}
	else {
		mus_Menu.pause();
		if (area == 0 || area == 1)
			mus_Game.play();
		
		else if (area == 3)
			mus_Boss_Flower.play();
		
		if (!pauseMenuOpen) {
			render();
			movePlayer();
			animate();
			checkCollision();
			objectMovement();
			enemyMovement();
			boss_Animate();
			boss_Movement();
			boss_Collision();
		}
	}
}

function createMap()
{
	for(var i = 0; i < imgStr.length; i++)
	{
		images[i] = new Image();
		images[i].src = "img/"+imgStr[i]+".png";
	}
	for(var i = 0; i < imgStr1.length; i++)
	{
		images1[i] = new Image();
		images1[i].src = "img/Zone1/"+imgStr1[i]+".png";
	}	
	for(var i = 0; i < imgStr1.length; i++)
	{
		images2[i] = new Image();
		images2[i].src = "img/Zone2/"+imgStr2[i]+".png";
	}	
	for(var i = 0; i < imgStr3.length; i++)
	{
		images3[i] = new Image();
		images3[i].src = "img/ZoneBoss/"+imgStr3[i]+".png";
	}
	
	for (var row = 0; row < ROWS; row++)
	{	
		for (var col = 0; col < COLS; col++)
		{
			var tile = {};
			tile.x = 64*col;
			tile.y = 64*row;
			tile.img = images[map[row][col]];
			if (map[row][col] == 16 || map[row][col] == 17 || map[row][col] == 18 || map[row][col] == 19 ||
				map[row][col] == 20 || map[row][col] == 21 || map[row][col] == 22 || map[row][col] == 23 || 
				map[row][col] == 24 || map[row][col] == 25 || map[row][col] == 26 || map[row][col] == 27 ||
				map[row][col] == 28 || map[row][col] == 29 || map[row][col] == 30 || map[row][col] == 31 || 
				map[row][col] == 32 || map[row][col] == 33 || map[row][col] == 34 || map[row][col] == 35 ||
				map[row][col] == 36 || map[row][col] == 37 || map[row][col] == 57 || map[row][col] == 58 ||
				map[row][col] == 59 || map[row][col] == 60 || map[row][col] == 61 || map[row][col] == 62) 
			{
				mapCollidable.push(tile);
			}
			if (map[row][col] == 67)
			{
				warpZone1.push(tile);
			}
			if (map[row][col] == 68)
			{
				warpZone2.push(tile);
			}
			if (map[row][col] == 38 || map[row][col] == 39 || map[row][col] == 40) 
			{
				mapFarm.push(tile);
			}
			map[row][col] = tile;		
		}
	}

	for (var row = 0; row < ROWSAREA1; row++)
	{	
		for (var col = 0; col < COLSAREA1; col++)
		{
			var tile = {};
			tile.x = 64*col;
			tile.y = 64*row;
			tile.img = images1[mapArea1[row][col]];
			if (mapArea1[row][col] == 41 || mapArea1[row][col] == 44 || mapArea1[row][col] == 45 || mapArea1[row][col] == 46 ||
				mapArea1[row][col] == 47 || mapArea1[row][col] == 48 || mapArea1[row][col] == 49 || mapArea1[row][col] == 52 || 
				mapArea1[row][col] == 53 || mapArea1[row][col] == 57 || mapArea1[row][col] == 58 || mapArea1[row][col] == 59 ||
				mapArea1[row][col] == 60 || mapArea1[row][col] == 61 || mapArea1[row][col] == 62 || mapArea1[row][col] == 63 || 
				mapArea1[row][col] == 64 || mapArea1[row][col] == 65 || mapArea1[row][col] == 67 || mapArea1[row][col] == 68 ||
				mapArea1[row][col] == 69 || mapArea1[row][col] == 70 || mapArea1[row][col] == 71 || mapArea1[row][col] == 72 ||
				mapArea1[row][col] == 73 || mapArea1[row][col] == 74 || mapArea1[row][col] == 75 || mapArea1[row][col] == 76 ||
				mapArea1[row][col] == 77 || mapArea1[row][col] == 78 || mapArea1[row][col] == 79 || mapArea1[row][col] == 80 || 
				mapArea1[row][col] == 81 || mapArea1[row][col] == 82 || mapArea1[row][col] == 83 || mapArea1[row][col] == 84 ||
				mapArea1[row][col] == 85 || mapArea1[row][col] == 86 || mapArea1[row][col] == 87 || mapArea1[row][col] == 88 || 
				mapArea1[row][col] == 89 || mapArea1[row][col] == 90 || mapArea1[row][col] == 91 || mapArea1[row][col] == 92 ||
				mapArea1[row][col] == 93 || mapArea1[row][col] == 94 || mapArea1[row][col] == 95 || mapArea1[row][col] == 96 ||
				mapArea1[row][col] == 97 || mapArea1[row][col] == 98 || mapArea1[row][col] == 99 || mapArea1[row][col] == 100 || 
				mapArea1[row][col] == 101 || mapArea1[row][col] == 102 || mapArea1[row][col] == 103 || mapArea1[row][col] == 104 ||
				mapArea1[row][col] == 105 || mapArea1[row][col] == 106 || mapArea1[row][col] == 107 || mapArea1[row][col] == 108 || 
				mapArea1[row][col] == 109 || mapArea1[row][col] == 110 || mapArea1[row][col] == 111 || mapArea1[row][col] == 112 ||
				mapArea1[row][col] == 115 || mapArea1[row][col] == 116 || mapArea1[row][col] == 117 || mapArea1[row][col] == 118 ||
				mapArea1[row][col] == 119 || mapArea1[row][col] == 120 || mapArea1[row][col] == 123 || mapArea1[row][col] == 124 || 
				mapArea1[row][col] == 125 || mapArea1[row][col] == 126 || mapArea1[row][col] == 128 || mapArea1[row][col] == 131 ||
				mapArea1[row][col] == 132 || mapArea1[row][col] == 133 || mapArea1[row][col] == 134 || mapArea1[row][col] == 135 || 
				mapArea1[row][col] == 136 || mapArea1[row][col] == 137 || mapArea1[row][col] == 138 || mapArea1[row][col] == 139 ||
				mapArea1[row][col] == 140 || mapArea1[row][col] == 141 || mapArea1[row][col] == 142 || mapArea1[row][col] == 143 ||
				mapArea1[row][col] == 144 || mapArea1[row][col] == 145 || mapArea1[row][col] == 146 || mapArea1[row][col] == 147 ||
				mapArea1[row][col] == 148 || mapArea1[row][col] == 149) 
			{
				mapCollidableArea1.push(tile);
			}
			if (mapArea1[row][col] == 150)
			{
				warpZone0.push(tile);
			}
			
			else if (mapArea1[row][col] == 151)
			{
				warpZoneBoss.push(tile);
			}
			
			mapArea1[row][col] = tile;		
		}
	}

	for (var row = 0; row < ROWSAREA2; row++)
	{	
		for (var col = 0; col < COLSAREA2; col++)
		{
			var tile = {};
			tile.x = 64*col;
			tile.y = 64*row;
			tile.img = images2[mapArea2[row][col]];
			if (mapArea2[row][col] == 1 || mapArea2[row][col] == 3 || mapArea2[row][col] == 4 || mapArea2[row][col] == 5 ||
				mapArea2[row][col] == 9 || mapArea2[row][col] == 10 || mapArea2[row][col] == 11 || mapArea2[row][col] == 12 || 
				mapArea2[row][col] == 13 || mapArea2[row][col] == 14 || mapArea2[row][col] == 15 || mapArea2[row][col] == 16 ||
				mapArea2[row][col] == 17 || mapArea2[row][col] == 23 || mapArea2[row][col] == 24 || mapArea2[row][col] == 25 || 
				mapArea2[row][col] == 26 || mapArea2[row][col] == 27 || mapArea2[row][col] == 28 || mapArea2[row][col] == 29 ||
				mapArea2[row][col] == 37 || mapArea2[row][col] == 38 || mapArea2[row][col] == 39 || mapArea2[row][col] == 40 ||
				mapArea2[row][col] == 42 || mapArea2[row][col] == 43 || mapArea2[row][col] == 44 || mapArea2[row][col] == 45 ||
				mapArea2[row][col] == 48 || mapArea2[row][col] == 49 || mapArea2[row][col] == 50 || mapArea2[row][col] == 51 ||
				mapArea2[row][col] == 52 || mapArea2[row][col] == 54 || mapArea2[row][col] == 55 || mapArea2[row][col] == 56 ||
				mapArea2[row][col] == 57) 
			{
				mapCollidableArea2.push(tile);
			}
			if (mapArea2[row][col] == 61)
			{
				warpZone0.push(tile);
			}
			mapArea2[row][col] = tile;		
		}
	}

	for (var row = 0; row < ROWSBOSS; row++)
	{	
		for (var col = 0; col < COLSBOSS; col++)
		{
			var tile = {};
			tile.x = 64*col;
			tile.y = 64*row;
			tile.img = images3[mapAreaBoss[row][col]];
			if (mapAreaBoss[row][col] == 1 || mapAreaBoss[row][col] == 2 || mapAreaBoss[row][col] == 3 || mapAreaBoss[row][col] == 4 || 
				mapAreaBoss[row][col] == 5 || mapAreaBoss[row][col] == 6 || mapAreaBoss[row][col] == 7 || mapAreaBoss[row][col] == 8 || 
				mapAreaBoss[row][col] == 10 || mapAreaBoss[row][col] == 15 || mapAreaBoss[row][col] == 16) 
			{
				mapCollidableBoss.push(tile);
			}
			if (mapAreaBoss[row][col] == 13)
			{
				warpZoneBoss.push(tile);
			}
			mapAreaBoss[row][col] = tile;		
		}
	}
	
	updateInterval = setInterval(update, 1000/fps);
}

function getMousePos(canvas, event) 
{
	var rect = canvas.getBoundingClientRect(),
    scaleX = canvas.width / rect.width,
    scaleY = canvas.height / rect.height; 
	return {
    x: (event.clientX - rect.left) * scaleX,
    y: (event.clientY - rect.top) * scaleY
  }
}

function boomerangTimer()
{
	boomerang.timeThrown++;
}

function stunTimer()
{
	enemy.stunTime++;
	enemyStump.stunTime++;
	boss_Flower.stunTime++;
	if (enemy.stunTime > 2 || enemyStump.stunTime > 2 || boss_Flower.stunTime > 2)
	{
		enemy.stun = false;
		enemy.stunTime = 0;
		enemyStump.stun = false;
		enemyStump.stunTime = 0;
		boss_Flower.stun = false;
		boss_Flower.stunTime = 0;
		clearInterval(timeStunned);
	}
}

function boomerangAttack(e)
{
	if (!mainMenuOpen) {
		if (boomerang.thrown == false)
		{
			var mousePosition = getMousePos(canvas, e);
			boomerang.x = player.x;
			boomerang.y = player.y;	
			boomerang.thrown = true;
			boomerang.dx = mousePosition.x - canvas.width/2;
			boomerang.dy = mousePosition.y - canvas.height/2;
			boomerang.angle = Math.atan2(boomerang.dx,boomerang.dy)*180/Math.PI;
			boomerang.distance = Math.sqrt(boomerang.dx*boomerang.dx + boomerang.dy*boomerang.dy);
			boomerang.speedX = boomerang.speed * (boomerang.dx / boomerang.distance);
			boomerang.speedY = boomerang.speed * (boomerang.dy / boomerang.distance);
			boomerangTime = setInterval(boomerangTimer, 1000);
		}
	}
}

function meleeAttack() 
{
	if (!mainMenuOpen && inventory.includes(axePickup)) 
	{
		if(player.dir == 0) 
		{
			weapon.image.src = "img/axeSheet1.png";
			weapon.xSize = 128;
			weapon.ySize = 64;
			weapon.vert = 0;
			weapon.dirX = -32;
			weapon.dirY = -48; 
		}
		if(player.dir == 1) 
		{
			weapon.image.src = "img/axeSheet2.png";
			weapon.xSize = 64;
			weapon.ySize = 128;
			weapon.hor = 1;
			weapon.dirX = 32;
			weapon.dirY = -12; 
		}
		if(player.dir == 2) 
		{
			weapon.image.src = "img/axeSheet1.png";
			weapon.xSize = 128;
			weapon.ySize = 64;
			weapon.vert = 1;
			weapon.dirX = -48;
			weapon.dirY = 64; 
		}
		if(player.dir == 3) 
		{
			weapon.image.src = "img/axeSheet2.png";
			weapon.xSize = 64;
			weapon.ySize = 128;
			weapon.hor = 0;
			weapon.dirX = -48;
			weapon.dirY = -24; 
		}	
		
		rndNum = Math.floor((Math.random() * 3) + 1);
		
		if (rndNum == 1) 
			sfx_Swing_1.play();
		
		else if (rndNum == 2)
			sfx_Swing_2.play();
		
		else if (rndNum == 3)
			sfx_Swing_3.play();
		
		weapon.attack = true;
	}	
}

function interactWith()
{
	if (player.x + player.xSize - 8 > sign.x - 32 && player.x < sign.x + 88 && player.y + player.ySize > sign.y - 32 && player.y < sign.y + 66)
	{
		if (inventory.includes(logPickup)) {
			mapCollidable = [];
			
			map = mapBridge;
			
			for (var row = 0; row < ROWS; row++)
			{	
				for (var col = 0; col < COLS; col++)
				{
					var tile = {};
					tile.x = 64*col;
					tile.y = 64*row;
					tile.img = images[map[row][col]];
					if (map[row][col] == 16 || map[row][col] == 17 || map[row][col] == 18 || map[row][col] == 19 ||
						map[row][col] == 20 || map[row][col] == 21 || map[row][col] == 22 || map[row][col] == 23 || 
						map[row][col] == 24 || map[row][col] == 25 || map[row][col] == 26 || map[row][col] == 27 ||
						map[row][col] == 28 || map[row][col] == 29 || map[row][col] == 30 || map[row][col] == 31 || 
						map[row][col] == 32 || map[row][col] == 33 || map[row][col] == 34 || map[row][col] == 35 ||
						map[row][col] == 36 || map[row][col] == 37 || map[row][col] == 57 || map[row][col] == 58 ||
						map[row][col] == 59 || map[row][col] == 60 || map[row][col] == 61 || map[row][col] == 62) 
					{
						mapCollidable.push(tile);
					}
					else if (map[row][col] == 67)
					{
						warpZone1.push(tile);
					}
					else if (map[row][col] == 68)
					{
						warpZone2.push(tile);
					}
					else if (map[row][col] == 38 || map[row][col] == 39 || map[row][col] == 40) 
					{
						mapFarm.push(tile);
					}
					map[row][col] = tile;		
				}
			}

			var remove = inventory.indexOf(logPickup);
		    if (remove !== -1) {
		        inventory.splice(remove, 1);
		    }
			console.log("Building Bridge");
		}

		else if (textBoxOpen == false) {
			textBoxOpen = true
			if (lang == "EN") 
				document.getElementById("textBox").innerHTML = "Tip: Use logs to build a bridge here. First you'll need an axe!";
			
			else if (lang == "FR") 
				document.getElementById("textBox").innerHTML = "Conseil: Utilisez les journaux pour construire un pont ici. D'abord, vous aurez besoin d'une hache!";

			document.getElementById("textBox").style.visibility = "visible";
			console.log("interact");
		}
		else {
			document.getElementById("textBox").style.visibility = "hidden";
			textBoxOpen = false;
			console.log("interactFalse");
		}
	}
}

function objectMovement()
{
	if (boomerang.timeThrown > .2)
	{
		boomerang.dx = player.x - boomerang.x;
		boomerang.dy = player.y - boomerang.y;
		boomerang.angle = Math.atan2(boomerang.dx,boomerang.dy)*180/Math.PI;
		boomerang.distance = Math.sqrt(boomerang.dx*boomerang.dx + boomerang.dy*boomerang.dy);
		boomerang.speedX = boomerang.speed * (boomerang.dx / boomerang.distance);
		boomerang.speedY = boomerang.speed * (boomerang.dy / boomerang.distance);
	}
	if (boomerang.thrown == true)
	{
		boomerang.x += boomerang.speedX;
		boomerang.y += boomerang.speedY;
		sfx_Boomerang.play();
	}
	else 
		sfx_Boomerang.pause();
}

function enemyMovement()
{
	enemy.dx = player.x - enemy.x;
	enemy.dy = player.y - enemy.y;
	enemy.distance = Math.sqrt(enemy.dx*enemy.dx + enemy.dy*enemy.dy);
	enemy.angle = Math.atan2(enemy.dy, enemy.dx)* 180/Math.PI;
	enemy.speedX = enemy.speed * (enemy.dx / enemy.distance);
	enemy.speedY = enemy.speed * (enemy.dy / enemy.distance);	
	if (enemy.distance < 500 && enemy.stun == false && enemy.dead == false)
	{
		sfx_Enemy_Mushroom.play();
		enemy.x += enemy.speedX;
		enemy.y += enemy.speedY;
	}
	else {
		sfx_Enemy_Mushroom.pause();
	}

	enemyStump.dx = player.x - enemyStump.x;
	enemyStump.dy = player.y - enemyStump.y;
	enemyStump.distance = Math.sqrt(enemyStump.dx*enemyStump.dx + enemyStump.dy*enemyStump.dy);
	enemyStump.angle = Math.atan2(enemyStump.dy, enemyStump.dx)* 180/Math.PI;
	enemyStump.speedX = enemyStump.speed * (enemyStump.dx / enemyStump.distance);
	enemyStump.speedY = enemyStump.speed * (enemyStump.dy / enemyStump.distance);
	if (enemyStump.distance < 500 && enemyStump.stun == false && enemyStump.dead == false)
	{
		if (Math.abs(enemyStump.speedX) > Math.abs(enemyStump.speedY) && enemyStump.speedX > 0)
		{
			enemyStump.dir = 1;
		}
		else if (Math.abs(enemyStump.speedX) > Math.abs(enemyStump.speedY) && enemyStump.speedX < 0)
		{
			enemyStump.dir = 3;
		}
		else if (Math.abs(enemyStump.speedX) < Math.abs(enemyStump.speedY) && enemyStump.speedY > 0)
		{
			enemyStump.dir = 0;
		}
		else if (Math.abs(enemyStump.speedX) < Math.abs(enemyStump.speedY) && enemyStump.speedY < 0)
		{
			enemyStump.dir = 2;
		}		
		sfx_Enemy_Mushroom.play();
		enemyStump.idle = false;
		enemyStump.x += enemyStump.speedX;
		enemyStump.y += enemyStump.speedY;
	}
}

function checkCollision()
{
	if (player.x + player.xSize > foodPickup.x && player.x < foodPickup.x + 64 && player.y + player.ySize > foodPickup.y && player.y < foodPickup.y + 64)
	{
		if (!inventory.includes(foodPickup)) 
			if (!craftInv.includes(stickPickup))
				inventory.push(foodPickup);
	}

	if (player.x + player.xSize > flintPickup.x && player.x < flintPickup.x + 64 && player.y + player.ySize > stickPickup.y && player.y < flintPickup.y + 64 && area == 1)
	{
		if (!flintPickup.used) {
				inventory.push(flintPickup);
				flintPickup.used = true;
			}
	}	
	
	if (player.x + player.xSize > vinePickup.x && player.x < vinePickup.x + 64 && player.y + player.ySize > vinePickup.y && player.y < vinePickup.y + 64 && area == 1)
	{
		if (!vinePickup.used) {
				inventory.push(vinePickup);
				vinePickup.used = true;
			}
	}	

	if (player.x + player.xSize > rockPickup.x && player.x < rockPickup.x + 64 && player.y + player.ySize > rockPickup.y && player.y < rockPickup.y + 64 && area == 2)
	{
		if (!rockPickup.used) {
				inventory.push(rockPickup);
				rockPickup.used = true;
			}
	}	
	
	if (player.x + player.xSize > stickPickup.x && player.x < stickPickup.x + 64 && player.y + player.ySize > stickPickup.y && player.y < stickPickup.y + 64 && area == 1)
	{
		if (!stickPickup.used) {
				inventory.push(stickPickup);
				stickPickup.used = true;
			}
	}	

	if (player.x + player.xSize - 8 > tree.x && player.x < tree.x + 56 && player.y + player.ySize > tree.y && player.y < tree.y + 32 && tree.used == false)
	{
		player.x = oldPosition.x;
		player.y = oldPosition.y;
	}
	
	if (player.x + player.xSize - 8 > tree_Boss.x && player.x < tree_Boss.x + 56 && player.y + player.ySize > tree_Boss.y && player.y < tree_Boss.y + 32 && tree_Boss.used == false)
	{
		player.x = oldPosition.x;
		player.y = oldPosition.y;
	}
	
	if (player.x + player.xSize - 8 > sign.x - 32 && player.x < sign.x + 88 && player.y + player.ySize > sign.y - 32 && player.y < sign.y + 66)
	{
		if (player.x + player.xSize - 8 > sign.x && player.x < sign.x + 56 && player.y + player.ySize > sign.y && player.y < sign.y + 32)
		{
			player.x = oldPosition.x;
			player.y = oldPosition.y;
		}
	}
	else {
		textBoxOpen = false;
		document.getElementById("textBox").style.visibility = "hidden";
	}	
	
	if (player.x + player.xSize > enemyStump.x + 20 && player.x < enemyStump.x + 28 && player.y + player.ySize > enemyStump.y + 28 && player.y < enemyStump.y + 50 && enemyStump.dead == false && area == 1)
	{	
		playerHealth--;
		player.x += enemyStump.speedX*200;
		player.y += enemyStump.speedY*200;
		if (playerHealth <= 0) {
			canvasHealth.clearRect(0,0, elemHealth.width, elemHealth.height);
			playerDead();
		}		
	}

	if (player.x + player.xSize > enemy.x + 20 && player.x < enemy.x + 28 && player.y + player.ySize > enemy.y + 28 && player.y < enemy.y + 50 && enemy.dead == false && area == 2)
	{	
		sfx_Hurt.play();
		playerHealth--;
		player.x += enemy.speedX*200;
		player.y += enemy.speedY*200;
		if (playerHealth <= 0) {
			canvasHealth.clearRect(0,0, elemHealth.width, elemHealth.height);
			playerDead();
		}		
	}

	if (area == 0)
	{
		for (var ctr = 0; ctr < mapCollidable.length; ctr++) 
		{
			if (player.x + player.xSize - 8 > mapCollidable[ctr].x && player.x < mapCollidable[ctr].x + 56 && player.y + player.ySize > mapCollidable[ctr].y && player.y < mapCollidable[ctr].y + 32) 
			{
				player.x = oldPosition.x;
				player.y = oldPosition.y;
			}
		}	
		for (var ctr = 0; ctr < mapCollidable.length; ctr++) 
		{
			if (enemy.x + enemy.size > mapCollidable[ctr].x && enemy.x < mapCollidable[ctr].x + 64 && enemy.y + enemy.size > mapCollidable[ctr].y && enemy.y < mapCollidable[ctr].y + 64) 
			{
				enemy.x = enemyOldPosition.x;
				enemy.y = enemyOldPosition.y;
			}
		}
	}
	
	if (area == 1) 
	{
		for (var ctr = 0; ctr < mapCollidableArea1.length; ctr++) 
		{
			if (player.x + player.xSize -8 > mapCollidableArea1[ctr].x && player.x < mapCollidableArea1[ctr].x + 56 && player.y + player.ySize > mapCollidableArea1[ctr].y && player.y < mapCollidableArea1[ctr].y + 32) 
			{
				player.x = oldPosition.x;
				player.y = oldPosition.y;
			}
		}
		for (var ctr = 0; ctr < mapCollidableArea1.length; ctr++) 
		{
			if (enemyStump.x + enemyStump.size > mapCollidableArea1[ctr].x && enemyStump.x < mapCollidableArea1[ctr].x + 64 && enemyStump.y + enemyStump.size > mapCollidableArea1[ctr].y && enemyStump.y < mapCollidableArea1[ctr].y + 64) 
			{
				enemyStump.x = enemyStump.oldPosX;
				enemyStump.y = enemyStump.oldPosY;
			}
		}
	}

	if (area == 2) 
	{
		for (var ctr = 0; ctr < mapCollidableArea2.length; ctr++) 
		{
			if (player.x + player.xSize > mapCollidableArea2[ctr].x && player.x < mapCollidableArea2[ctr].x + 64 && player.y + player.ySize > mapCollidableArea2[ctr].y && player.y < mapCollidableArea2[ctr].y + 64) 
			{
				player.x = oldPosition.x;
				player.y = oldPosition.y;
			}
		}
		for (var ctr = 0; ctr < mapCollidableArea2.length; ctr++) 
		{
			if (enemy.x + enemy.size > mapCollidableArea2[ctr].x && enemy.x < mapCollidableArea2[ctr].x + 64 && enemy.y + enemy.size > mapCollidableArea2[ctr].y && enemy.y < mapCollidableArea2[ctr].y + 64) 
			{
				enemy.x = enemyOldPosition.x;
				enemy.y = enemyOldPosition.y;
			}
		}
	}
	
	if (area == 3) 
	{
		for (var ctr = 0; ctr < mapCollidableBoss.length; ctr++) 
		{
			if (player.x + player.xSize - 8 > mapCollidableBoss[ctr].x && player.x < mapCollidableBoss[ctr].x + 56 && player.y + player.ySize > mapCollidableBoss[ctr].y && player.y < mapCollidableBoss[ctr].y + 32) 
			{
				player.x = oldPosition.x;
				player.y = oldPosition.y;
			}
		}
		for (var ctr = 0; ctr < mapCollidableBoss.length; ctr++) 
		{
			if (boss_Flower.x + boss_Flower.size > mapCollidableBoss[ctr].x && boss_Flower.x < mapCollidableBoss[ctr].x + 64 && boss_Flower.y + boss_Flower.size > mapCollidableBoss[ctr].y && boss_Flower.y < mapCollidableBoss[ctr].y + 64) 
			{
				boss_Flower.x = boss_Flower.oldPosX;
				boss_Flower.y = boss_Flower.oldPosY;
			}
		}
	}
	
	for (var ctr = 0; ctr < warpZone0.length; ctr++) 
	{
		if (player.x + player.xSize - 8 > warpZone0[ctr].x && player.x < warpZone0[ctr].x + 56 && player.y + player.ySize > warpZone0[ctr].y && player.y < warpZone0[ctr].y + 32) 
		{
			if (area == 1)
			{
				area = 0;
				player.x = 1544;
				player.y = 32;
			}
			if (area == 2)
			{
				area = 0;
				player.x = 1544;
				player.y = 2880;
			}
		}
	}

	for (var ctr = 0; ctr < warpZone1.length; ctr++) 
	{
		if (player.x + player.xSize - 8 > warpZone1[ctr].x && player.x < warpZone1[ctr].x + 56 && player.y + player.ySize > warpZone1[ctr].y && player.y < warpZone1[ctr].y + 32) 
		{
			if (area == 0)
			{
				area = 1;
				player.x = 2696;
				player.y = 2368;
			}
		}
	}

	for (var ctr = 0; ctr < warpZone2.length; ctr++) 
	{
		if (player.x + player.xSize - 8 > warpZone2[ctr].x && player.x < warpZone2[ctr].x + 56 && player.y + player.ySize > warpZone2[ctr].y && player.y < warpZone2[ctr].y + 32) 
		{
			if (area == 0)
			{
				area = 2;
				player.x = 2888;
				player.y = 32;
			}
		}
	}
	
	for (var ctr = 0; ctr < warpZoneBoss.length; ctr++) 
	{
		if (player.x + player.xSize - 8 > warpZoneBoss[ctr].x && player.x < warpZoneBoss[ctr].x + 56 && player.y + player.ySize > warpZoneBoss[ctr].y && player.y < warpZoneBoss[ctr].y + 32) 
		{
			if (area == 1)
			{
				area = 3;
				player.x = 460;
				player.y = 64;
				mus_Game.pause();
				sfx_Boss_Flower.play();
				mus_Boss_Flower.play();
			}
		}
	}
		
	if (player.x + player.xSize > boomerang.x && player.x < boomerang.x + boomerang.size && player.y + player.ySize > boomerang.y && player.y < boomerang.y + boomerang.size && boomerang.timeThrown > 0.2)
	{
		sfx_Boomerang.pause();
		boomerang.thrown = false;
		clearInterval(boomerangTime);
		boomerang.timeThrown = 0;
		console.log("Collide With Boomerang");
	}

	if (boomerang.x + boomerang.size > enemy.x + 20 && boomerang.x < enemy.x + 28 && boomerang.y + boomerang.size > enemy.y + 28 && boomerang.y < enemy.y + 50 && boomerang.thrown == true && enemy.stun == false)
	{
		sfx_Enemy_Mushroom.pause();
		boomerang.timeThrown = 1;
		enemy.stun = true;
		timeStunned = setInterval(stunTimer, 1000);
		console.log("Boomerang Hit Enemy");
	}

	if (player.x + weapon.dirX + weapon.xSize > enemy.x + 20 && player.x + weapon.dirX < enemy.x + 28 && player.y + weapon.dirY + weapon.ySize > enemy.y + 28 && player.y + weapon.dirY < enemy.y + 50 && weapon.attack == true)
	{
		sfx_Enemy_Mushroom.pause();
		sfx_Swing_Hit.play();
		enemy.dead = true;
		console.log("Weapon Hit Enemy");
	}

	if (boomerang.x + boomerang.size > enemyStump.x + 20 && boomerang.x < enemyStump.x + 28 && boomerang.y + boomerang.size > enemyStump.y + 28 && boomerang.y < enemyStump.y + 50 && boomerang.thrown == true && enemyStump.stun == false)
	{
		sfx_Enemy_Mushroom.pause();
		boomerang.timeThrown = 1;
		enemyStump.stun = true;
		timeStunned = setInterval(stunTimer, 1000);
		console.log("Boomerang Hit Enemy");
	}

	if (player.x + weapon.dirX + weapon.xSize > enemyStump.x + 20 && player.x + weapon.dirX < enemyStump.x + 28 && player.y + weapon.dirY + weapon.ySize > enemyStump.y + 28 && player.y + weapon.dirY < enemyStump.y + 50 && weapon.attack == true)
	{
		sfx_Enemy_Mushroom.pause();
		enemyStump.dead = true;
		console.log("Weapon Hit Enemy");
	}

	if (player.x + weapon.dirX + weapon.xSize > tree.x && player.x + weapon.dirX < tree.x + 64 && player.y + weapon.dirY + weapon.ySize > tree.y && player.y + weapon.dirY < tree.y + 64 && weapon.attack == true)
	{
		if (!tree.used) 
		{
			sfx_Swing_Hit.play();
			inventory.push(logPickup);
			tree.used = true;
		}
		console.log("Axe Hit Tree");
	}

	if (player.x + weapon.dirX + weapon.xSize > tree_Boss.x && player.x + weapon.dirX < tree_Boss.x + 64 && player.y + weapon.dirY + weapon.ySize > tree_Boss.y && player.y + weapon.dirY < tree_Boss.y + 64 && weapon.attack == true)
	{
		if (!tree_Boss.used) 
		{
			sfx_Swing_Hit.play(); 
			tree_Boss.used = true;
		}
		console.log("Axe Hit Tree");
	}
	

	oldPosition.x = player.x;
	oldPosition.y = player.y;
	enemyOldPosition.x = enemy.x;
	enemyOldPosition.y = enemy.y;
	enemyStump.oldPosX = enemyStump.x;
	enemyStump.oldPosY = enemyStump.y;
	boss_Flower.oldPosX = boss_Flower.x;
	boss_Flower.oldPosY = boss_Flower.y;
}

function animate()
{
	if (leftPressed || rightPressed || upPressed || downPressed)
	{
		currentFrame++;
		if (currentFrame == maxFrames)
		{
			player.frame++;
			currentFrame = 0;
			if (player.frame == 3)
				player.frame = 0;
		}
	}

	if (boomerang.thrown == true)
	{
		boomerang.currentFrame++;
		if (boomerang.currentFrame == boomerang.maxFrames)
		{
			boomerang.frame++;
			boomerang.currentFrame = 0;
			if (boomerang.frame == 7)
				boomerang.frame = 0;
		}
	}

	if (weapon.attack == true)
	{
		weapon.currentFrame++;
		if (weapon.currentFrame == weapon.maxFrames)
		{
			weapon.frame++;
			weapon.currentFrame = 0;
			if (weapon.frame == 3)
			{
				weapon.frame = 0;
				weapon.attack = false;
			}
		}
	}

	if (enemyStump.idle == false)
	{
		enemyStump.currentFrame++;
		if (enemyStump.currentFrame == enemyStump.maxFrames)
		{
			enemyStump.frame++;
			enemyStump.currentFrame = 0;
			if (enemyStump.frame == 3)
				enemyStump.frame = 0;
		}
	}
}

function openCraftMenu()
{
	if (!mainMenuOpen) {
		craftInvOpen = !craftInvOpen;

		if (craftInvOpen) {
			elemCraft.style.visibility = "visible";
		}
		else {
		elemCraft.style.visibility = "hidden";
		}
	}
}

function openPauseMenu()
{
	if (!mainMenuOpen && !optMenuOpen && !controlsMenuOpen) {
		pauseMenuOpen = !pauseMenuOpen;

		if (pauseMenuOpen)  {
			elemPause.style.visibility = "visible";
			canvasPause.font = "bold 36px Arial";
			canvasPause.textAlign = "center";
			canvasPause.fillStyle = "black";
			
			if (lang == "EN") {	
			canvasPause.fillText("PAUSED", (elemPause.width/2), 40);
			
			canvasPause.drawImage(btnPauseOptions.image, btnPauseOptions.x, btnPauseOptions.y, btnWidth, btnHeight);
			canvasPause.drawImage(btnPauseControls.image, btnPauseControls.x, btnPauseControls.y, btnWidth, btnHeight);
			canvasPause.drawImage(btnPauseExit.image, btnPauseExit.x, btnPauseExit.y, btnWidth, btnHeight);
		
			canvasPause.fillText("OPTIONS", btnPauseOptions.x + (btnWidth / 2), btnPauseOptions.y + 45);
			canvasPause.fillText("EXIT", btnPauseExit.x + (btnWidth / 2), btnPauseExit.y + 45);
			
			canvasPause.font = "bold 32px Arial";
			canvasPause.fillText("CONTROLS", btnPauseControls.x + (btnWidth / 2), btnPauseControls.y + 45);
			}
			
			else if (lang == "FR") {	
			canvasPause.fillText("PAUSED", (elemPause.width/2), 40);
			
			canvasPause.drawImage(btnPauseOptions.image, btnPauseOptions.x, btnPauseOptions.y, btnWidth, btnHeight);
			canvasPause.drawImage(btnPauseControls.image, btnPauseControls.x, btnPauseControls.y, btnWidth, btnHeight);
			canvasPause.drawImage(btnPauseExit.image, btnPauseExit.x, btnPauseExit.y, btnWidth, btnHeight);
		
			canvasPause.fillText("OPTIONS", btnPauseOptions.x + (btnWidth / 2), btnPauseOptions.y + 45);
			canvasPause.fillText("SORTIR", btnPauseExit.x + (btnWidth / 2), btnPauseExit.y + 45);
			
			canvasPause.font = "bold 28px Arial";
			canvasPause.fillText("CONTRÔLES", btnPauseControls.x + (btnWidth / 2), btnPauseControls.y + 45);
			
			}
		}
		
		else {
			elemPause.style.visibility = "hidden";
		}
		
	}
}

function openRestartMenu()
{
	
	restartMenuOpen = true;
	elemRestart.style.visibility = "visible";
	canvasRestart.textAlign = "center";
	canvasRestart.fillStyle = "black";
	
	canvasRestart.drawImage(btnYes.image, btnYes.x, btnYes.y, btnWidth, btnHeight);
	canvasRestart.drawImage(btnNo.image, btnNo.x, btnNo.y, btnWidth, btnHeight);
	
	if (lang == "EN") {		
		canvasRestart.font = "bold 30px Arial";
		canvasRestart.fillText("Would You Like To Restart?", (elemRestart.width/2), 68);
		
		canvasRestart.font = "bold 36px Arial";
		canvasRestart.fillText("YES", btnYes.x + (btnWidth / 2), btnYes.y + 45);
		canvasRestart.fillText("NO", btnNo.x + (btnWidth / 2), btnNo.y + 45);
		
	}
	else if (lang == "FR") {
		canvasRestart.font = "bold 30px Arial";
		canvasRestart.fillText("Voulez-vous Redémarrer?", (elemRestart.width/2), 68);
		
		canvasRestart.font = "bold 36px Arial";
		canvasRestart.fillText("OUI", btnYes.x + (btnWidth / 2), btnYes.y + 45);
		canvasRestart.fillText("NON", btnNo.x + (btnWidth / 2), btnNo.y + 45);
	}
	
	document.getElementById("endGame").style.visibility = "visible";
}

function clickItem(event)
{
	
	var mousePos = { 
		x: event.pageX,
		y: event.pageY
	}
	
	if (isIntersect(mousePos, elemInventory)) {
		mousePos.x -= elemInventory.offsetLeft;
		mousePos.y -= elemInventory.offsetTop;
		
		if (craftInvOpen) {
			for (var ctr = 0; ctr < inventory.length; ctr++) {
				if (isIntersect(mousePos, {offsetLeft: inventory[ctr].x, offsetTop: inventory[ctr].y, width: inventory[ctr].width, height: inventory[ctr].height})) {
					craftInv.push(inventory[ctr]);
					inventory.splice(ctr,1);
					
					if (craftInv.length >= 2)
						craftItem(craftInv[0], craftInv[1]);
					
					break;
				}
			}
		}
		
		else {
			if (inventory.length >= 1) {
				if (isIntersect(mousePos, {offsetLeft: inventory[inventory.indexOf(foodPickup)].x, offsetTop: inventory[inventory.indexOf(foodPickup)].y, width: inventory[inventory.indexOf(foodPickup)].width, height: inventory[inventory.indexOf(foodPickup)].height})) {
					if (playerHealth < 3) {
						sfx_Eat.play();
						playerHealth++;
						inventory.splice(inventory.indexOf(foodPickup), 1);
					}
				}
			}
		}
	}
	
	else if (isIntersect(mousePos, elemCraft)) {
		mousePos.x -= elemCraft.offsetLeft;
		mousePos.y -= elemCraft.offsetTop;
		
		if (craftInvOpen) {
			for (var ctr = 0; ctr < craftInv.length; ctr++) {
				if (isIntersect(mousePos, {offsetLeft: craftInv[ctr].x, offsetTop: craftInv[ctr].y, width: craftInv[ctr].width, height: craftInv[ctr].height})) {
					if (ctr <= 1) {
						inventory.push(craftInv[ctr]);
						craftInv.splice(ctr,1);
						craftItem(null, null);
					}
					else if (ctr >= 2) {
						inventory.push(craftInv[ctr]);
						craftInv.splice(0, craftInv.length);
					}
					break;
				}
			}
		}
	}
}

function isIntersect(point, elem)
{
	if (point.x > elem.offsetLeft && point.x < elem.offsetLeft + elem.width && point.y > elem.offsetTop && point.y < elem.offsetTop + elem.height) {
		
		return true;
	}
	else
		return false;
}

function craftItem(item1, item2)
{
	if (item1 == stickPickup && item2 == rockPickup) {
		craftInv.push(axePickup);
	}
	
	else if (item1 == rockPickup && item2 == stickPickup) {
		craftInv.push(axePickup);
	}	
	
	else if (item1 == vinePickup && item2 == stickPickup) {
		craftInv.push(rodPickup);
	}	
	
	else if (item1 == stickPickup && item2 == vinePickup) {
		craftInv.push(rodPickup);
	}	
	
	else if (item1 == vinePickup && item2 == rockPickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == rockPickup && item2 == vinePickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == vinePickup && item2 == hidePickup) {
		craftInv.push(bootPickup);
	}	
	
	else if (item1 == hidePickup && item2 == vinePickup) {
		craftInv.push(bootPickup);
	}	
	
	else if (item1 == stickPickup && item2 == hidePickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == hidePickup && item2 == stickPickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == rockPickup && item2 == hidePickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == hidePickup && item2 == rockPickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == flintPickup && item2 == hidePickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == hidePickup && item2 == flintPickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == stickPickup && item2 == flintPickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == flintPickup && item2 == stickPickup) {
		craftInv.push(null);
	}
	
	else if (item1 == vinePickup && item2 == flintPickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == flintPickup && item2 == vinePickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == rockPickup && item2 == flintPickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == flintPickup && item2 == rockPickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == logPickup && item2 == flintPickup) {
		craftInv.push(firePickup);
	}	
	
	else if (item1 == flintPickup && item2 == logPickup) {
		craftInv.push(firePickup);
	}		
	
	else if (item1 == vinePickup && item2 == logPickup) {
		craftInv.push(null);
	}	
	
	else if (item1 == logPickup && item2 == vinePickup) {
		craftInv.push(null);
	}		
	
	else if (item1 == rockPickup && item2 == logPickup) {
		craftInv.push(null);
	}		
	
	else if (item1 == logPickup && item2 == rockPickup) {
		craftInv.push(null);
	}		
	
	else if (item1 == stickPickup && item2 == logPickup) {
		craftInv.push(null);
	}		
	
	else if (item1 == logPickup && item2 == stickPickup) {
		craftInv.push(null);
	}		
	
	else if (item1 == axePickup && item2 == logPickup) {
		craftInv.push(null);
	}		
	
	else if (item1 == logPickup && item2 == axePickup) {
		craftInv.push(null);
	}		
	
	else if (item1 == foodPickup && item2 == logPickup) {
		craftInv.push(null);
	}		
	
	else if (item1 == logPickup && item2 == foodPickup) {
		craftInv.push(null);
	}		
	
	else if (item1 == rodPickup && item2 == logPickup) {
		craftInv.push(null);
	}		
	
	else if (item1 == logPickup && item2 == rodPickup) {
		craftInv.push(null);
	}		
	
	else if (item1 == firePickup && item2 == foodPickup) {
		craftInv.push(cookedPickup);
	}	
	
	else if (item1 == foodPickup && item2 == firePickup) {
		craftInv.push(cookedPickup);
	}		
	
	else 
		craftInv.pop();
}

function onKeyDown(event)
{
	switch (event.keyCode)
	{
	    case 65: // A
	    	leftPressed = true;
	    	player.idle = false;
	    	break;
	    case 68: // D
	    	rightPressed = true;
	    	player.idle = false;
	    	break;
	    case 87: // W
	    	upPressed = true;
	    	player.idle = false;
	    	break;
	    case 83: // S
	    	downPressed = true;
	    	player.idle = false;
	    	break;			
		case 69: // E
			openCraftMenu();
			break;
		case 70: // F
			interactWith();
			break;
		case 32: // Space Bar
			console.log(player.x + ", " + player.y);
			meleeAttack();
			break;
		case 81: // Q
			openPauseMenu();
			break;
		case 80: // P
			if(player.speed < 3)
				player.speed = 3;
			else 
				player.speed = 1;
			break;
	}
}

function onKeyUp(event)
{
	switch (event.keyCode)
	{
	    case 65: // A
	    	leftPressed = false;
	    	player.idle = true; 
	    	break;
	    case 68: // D
	    	rightPressed = false;
	    	player.idle = true; 
	    	break;
	    case 87: // W
	    	upPressed = false;
	    	player.idle = true; 
	    	break;
	    case 83: // S
	    	downPressed = false;
	    	player.idle = true; 
	    	break;
	}
}

function movePlayer()
{	
	if (leftPressed)
	{
	    player.x -= player.speed;
	    player.dir = 3;
	}
	if (rightPressed)
	{
	    player.x += player.speed;
	    player.dir = 1;
	}
	if (upPressed)
	{
		player.y -= player.speed;
		player.dir = 0;
	}
	if (downPressed)
	{
   		player.y += player.speed;
   		player.dir = 2;
	}
	if(player.idle == true)
		player.frame = 0;
}

function playerDead()
{
	sfx_Enemy_Mushroom.pause();
	sfx_Death.play();
	sfx_Enemy_Mushroom.loop = false;
	mus_Game.pause();
	clearInterval(updateInterval);
	clearInterval(endTimer);
	openRestartMenu();
}

function endGameTimer() 
{
	if (!pauseMenuOpen) {
		var timeMinutes = Math.floor((endTime - currentTime)/60);
		var timeSeconds = (endTime - currentTime) - timeMinutes * 60;
		
		if (currentTime <= endTime) 
		{
			if (lang == "EN")
				document.getElementById("timer").innerHTML = "Time Left: " + timeMinutes + " : " + timeSeconds;
			else if (lang == "FR")
				document.getElementById("timer").innerHTML = "Temps Restant: " + timeMinutes + " : " + timeSeconds;
			
			currentTime++;
		}
		else if (currentTime > endTime) 
			gameOver();
	}	
}

function gameOver() 
{
	clearInterval(updateInterval);
	clearInterval(endTimer);
	mus_Game.pause();
	mus_Boss_Flower.pause();
	
	if (boss_Flower.dead == true) {
		mus_Win.play();
		if (lang == "EN")
			document.getElementById("endGame").innerHTML = "You Defeated The Enemy! You Win!";
		else if (lang == "FR")
			document.getElementById("endGame").innerHTML = "Vous avez Construit le Pont! Vous Gagnez!";
		
		document.getElementById("endGame").style.visibility = "visible";
	}
	else {
		sfx_Enemy_Mushroom.pause();
		mus_Lose.play();
		if (lang == "EN")
			document.getElementById("endGame").innerHTML = "Game Over! You Lose!";
		else if (lang == "FR")
			document.getElementById("endGame").innerHTML = "Jeu Terminé! Tu as Perdu!";
		
		document.getElementById("endGame").style.visibility = "visible";
	}
	openRestartMenu();
}

function render() 
{
	surface.clearRect(0,0,mapSizeX,mapSizeY);
	canvasCraft.clearRect(0,0, elemCraft.width, elemCraft.height);
	canvasInventory.clearRect(0,0, elemInventory.width, elemInventory.height);
	canvasHealth.clearRect(0,0, elemHealth.width, elemHealth.height);
	
	surface.setTransform(1,0,0,1,0,0);
	surface.translate(-player.x + canvas.width/2-24, -player.y + canvas.height/2-24);

	if (area == 0) {
		for (var row = 0; row < ROWS; row++) {
			for ( var col = 0; col < COLS; col++)
				surface.drawImage(map[row][col].img,map[row][col].x,map[row][col].y, 64, 64);
		}
		
		surface.drawImage(sign.image, sign.x, sign.y);
	}

	else if (area == 1) {
		for (var row = 0; row < ROWSAREA1; row++) {
			for ( var col = 0; col < COLSAREA1; col++)
				surface.drawImage(mapArea1[row][col].img,mapArea1[row][col].x,mapArea1[row][col].y, 64, 64);
		}
		
		if (!stickPickup.used)
			surface.drawImage(stickPickup.image, stickPickup.x, stickPickup.y);
	}
	
	else if (area == 2) {
		for (var row = 0; row < ROWSAREA2; row++) {
			for ( var col = 0; col < COLSAREA2; col++)
				surface.drawImage(mapArea2[row][col].img,mapArea2[row][col].x,mapArea2[row][col].y, 64, 64);
		}
		
		if (!rockPickup.used)
			surface.drawImage(rockPickup.image, rockPickup.x, rockPickup.y);
	}

	else if (area == 3) {
		for (var row = 0; row < ROWSBOSS; row++) {
			for ( var col = 0; col < COLSBOSS; col++)
				surface.drawImage(mapAreaBoss[row][col].img,mapAreaBoss[row][col].x,mapAreaBoss[row][col].y, 64, 64);
		}
	}
	
	for (var ctr = 0; ctr < inventory.length; ctr++) {
		inventory[ctr].x = ctr * 64;
		inventory[ctr].y = 0;
		canvasInventory.drawImage(inventory[ctr].image, inventory[ctr].x, inventory[ctr].y, 64, 64);
	}
			
	if (craftInvOpen) {
		canvasCraft.drawImage(crftPlus.image, 64, 0, 64, 64);
		canvasCraft.drawImage(crftEqual.image, 192, 0, 64, 64);
	}
		
	for (var ctr = 0; ctr < craftInv.length; ctr++) {
		craftInv[ctr].x = ctr * 128;
		craftInv[ctr].y = 0;
		canvasCraft.drawImage(craftInv[ctr].image, craftInv[ctr].x, craftInv[ctr].y, 64, 64);
	}
				
	if (!inventory.includes(foodPickup) || craftInv.includes(foodPickup))
		surface.drawImage(foodPickup.image, foodPickup.x, foodPickup.y);
		
	if (!tree.used && area == 0)
		surface.drawImage(tree.image, tree.x, tree.y);
	
	if (!tree_Boss.used && area == 1)
		surface.drawImage(tree_Boss.image, tree_Boss.x, tree_Boss.y);
	
	surface.drawImage(player.image, player.frame*48, player.dir*64, 48, 64, player.x, player.y, player.xSize, player.ySize);
	
	if (boomerang.thrown == true)
		surface.drawImage(boomerang.image, boomerang.frame*68, 0, 68, 68, boomerang.x, boomerang.y, boomerang.size, boomerang.size);

	if (!enemy.dead == true && area == 2)
		surface.drawImage(enemy.image, enemy.x, enemy.y);

	if (!enemyStump.dead == true && area == 1)
		surface.drawImage(enemyStump.image, enemyStump.frame*48, enemyStump.dir*64, 48, 64, enemyStump.x, enemyStump.y, 48, 64);

	if (weapon.attack == true) {
		if (player.dir == 0 || player.dir == 2)
			surface.drawImage(weapon.image, weapon.frame*128, weapon.vert*64, 128, 64, player.x + weapon.dirX, player.y + weapon.dirY, 128, 64)
		
		else if (player.dir == 1 || player.dir == 3)
			surface.drawImage(weapon.image, weapon.hor*64, weapon.frame*128, 64, 128, player.x + weapon.dirX, player.y + weapon.dirY, 64, 128)
	}
	
	for (var ctr = 0; ctr < playerHealth; ctr++)
		canvasHealth.drawImage(heart.image,(ctr * 64), 0, 64, 64);
	
	if (!boss_Flower.dead && area == 3) {
		surface.drawImage(boss_Flower.image, boss_Flower.frame*48, boss_Flower.dir*64, 48, 64, boss_Flower.x, boss_Flower.y, 96, 96);
		surface.drawImage(boss_Flower_Seed_1.image, boss_Flower_Seed_1.x, boss_Flower_Seed_1.y, 32, 32);
		surface.drawImage(boss_Flower_Seed_2.image, boss_Flower_Seed_2.x, boss_Flower_Seed_2.y, 32, 32);
		surface.drawImage(boss_Flower_Seed_3.image, boss_Flower_Seed_3.x, boss_Flower_Seed_3.y, 32, 32);
	}
}